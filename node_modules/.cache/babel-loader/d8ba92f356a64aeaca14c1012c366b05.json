{"ast":null,"code":"import _regeneratorRuntime from \"/Users/Neil/Projects/xkcd-geohashing/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\n\nvar _marked =\n/*#__PURE__*/\n_regeneratorRuntime.mark(getDOW),\n    _marked2 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(watchGetDOWRequest);\n\nimport { takeLatest, call, put, fork } from 'redux-saga/effects';\nimport * as actions from '../actions/dow';\nimport * as api from '../api/dow';\nimport { Types } from '../actions/dow';\nimport { select } from 'redux-saga/effects';\nexport var getDate = function getDate(state) {\n  return state.items;\n};\n\nfunction getDOW() {\n  var dateUsed, result;\n  return _regeneratorRuntime.wrap(function getDOW$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.prev = 0;\n          _context.next = 3;\n          return select(getDate);\n\n        case 3:\n          dateUsed = _context.sent;\n          console.log(dateUsed);\n          _context.next = 7;\n          return call(api.getDOW);\n\n        case 7:\n          result = _context.sent;\n          _context.next = 10;\n          return put({\n            type: Types.GET_DOW_SUCCESS,\n            payload: result\n          });\n\n        case 10:\n          _context.next = 15;\n          break;\n\n        case 12:\n          _context.prev = 12;\n          _context.t0 = _context[\"catch\"](0);\n          console.log('error');\n\n        case 15:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, _marked, this, [[0, 12]]);\n}\n\nfunction watchGetDOWRequest() {\n  return _regeneratorRuntime.wrap(function watchGetDOWRequest$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          _context2.next = 2;\n          return takeLatest(actions.Types.GET_DOW_REQUEST, getDOW);\n\n        case 2:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, _marked2, this);\n}\n\nvar DOWSagas = [fork(watchGetDOWRequest)];\nexport default DOWSagas;","map":{"version":3,"sources":["/Users/Neil/Projects/xkcd-geohashing/src/sagas/dow.js"],"names":["getDOW","watchGetDOWRequest","takeLatest","call","put","fork","actions","api","Types","select","getDate","state","items","dateUsed","console","log","result","type","GET_DOW_SUCCESS","payload","GET_DOW_REQUEST","DOWSagas"],"mappings":";;;;yBAOUA,M;;;yBAeAC,kB;;AAtBV,SAAQC,UAAR,EAAoBC,IAApB,EAA0BC,GAA1B,EAA+BC,IAA/B,QAA0C,oBAA1C;AACA,OAAO,KAAKC,OAAZ,MAAyB,gBAAzB;AACA,OAAO,KAAKC,GAAZ,MAAqB,YAArB;AACA,SAAQC,KAAR,QAAoB,gBAApB;AACA,SAAQC,MAAR,QAAqB,oBAArB;AAEA,OAAO,IAAMC,OAAO,GAAG,SAAVA,OAAU,CAACC,KAAD;AAAA,SAAWA,KAAK,CAACC,KAAjB;AAAA,CAAhB;;AACP,SAAUZ,MAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEiB,iBAAMS,MAAM,CAACC,OAAD,CAAZ;;AAFjB;AAEMG,UAAAA,QAFN;AAGEC,UAAAA,OAAO,CAACC,GAAR,CAAYF,QAAZ;AAHF;AAIiB,iBAAMV,IAAI,CAACI,GAAG,CAACP,MAAL,CAAV;;AAJjB;AAIQgB,UAAAA,MAJR;AAAA;AAME,iBAAMZ,GAAG,CAAC;AACTa,YAAAA,IAAI,EAAET,KAAK,CAACU,eADH;AAETC,YAAAA,OAAO,EAAEH;AAFA,WAAD,CAAT;;AANF;AAAA;AAAA;;AAAA;AAAA;AAAA;AAWMF,UAAAA,OAAO,CAACC,GAAR,CAAY,OAAZ;;AAXN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAeA,SAAUd,kBAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAIC,iBAAMC,UAAU,CAACI,OAAO,CAACE,KAAR,CAAcY,eAAf,EAAgCpB,MAAhC,CAAhB;;AAJD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAOA,IAAMqB,QAAQ,GAAG,CAChBhB,IAAI,CAACJ,kBAAD,CADY,CAAjB;AAIA,eAAeoB,QAAf","sourcesContent":["import {takeLatest, call, put, fork} from 'redux-saga/effects';\nimport * as actions from '../actions/dow';\nimport * as api from '../api/dow';\nimport {Types} from '../actions/dow';\nimport {select} from 'redux-saga/effects'\n\nexport const getDate = (state) => state.items;\nfunction* getDOW(){\n\ttry{\n\t\tlet dateUsed = yield select(getDate)\n\t\tconsole.log(dateUsed)\n\t\tconst result = yield call(api.getDOW);\n\t\t// console.log('successful saga execution')\n\t\tyield put({\n\t\t\ttype: Types.GET_DOW_SUCCESS,\n\t\t\tpayload: result\n\t\t})\n\t}catch(e){\n      console.log('error')\n\t}\n}\n\nfunction* watchGetDOWRequest(){\n\t// console.log('watching getdow saga call')\n\t//take the latest request action called and then call the getDow function\n\t//taking the latest because we want to adjust for when people update the date they put in\n\tyield takeLatest(actions.Types.GET_DOW_REQUEST, getDOW);\n}\n\nconst DOWSagas = [\n\tfork(watchGetDOWRequest),\n];\n\nexport default DOWSagas;\n"]},"metadata":{},"sourceType":"module"}