{"ast":null,"code":"import { takeEvery, takeLatest, take, call, put, fork } from 'redux-saga/effects';\nimport * as actions from '../actions/users';\nimport * as api from '../api/users';\n\nfunction* getUsers() {\n  try {\n    const result = yield call(api.getUsers);\n    yield put(actions.getUsersSuccess({\n      items: result.data.data\n    }));\n  } catch (e) {\n    yield put(actions.usersError({\n      error: 'An error occurred when trying to get the users'\n    }));\n  }\n}\n\nfunction* watchGetUsersRequest() {\n  yield takeEvery(actions.Types.GET_USERS_REQUEST, getUsers);\n}\n\nfunction* deleteUser(userId) {\n  try {\n    yield call(api.deleteUser, userId);\n    yield call(getUsers);\n  } catch (e) {\n    yield put(actions.usersError({\n      error: 'An error occurred when trying to delete the user'\n    }));\n  }\n}\n\nfunction* watchDeleteUserRequest() {\n  while (true) {\n    const {\n      payload\n    } = yield take(actions.Types.DELETE_USER_REQUEST);\n    yield call(deleteUser, payload.userId);\n  }\n}\n\nfunction* createUser({\n  payload\n}) {\n  try {\n    yield call(api.createUser, {\n      firstName: payload.firstName,\n      lastName: payload.lastName\n    });\n    yield call(getUsers);\n  } catch (e) {\n    yield put(actions.usersError({\n      error: 'An error occurred when trying to create the user'\n    }));\n  }\n}\n\nfunction* watchCreateUserRequest() {\n  yield takeLatest(actions.Types.CREATE_USER_REQUEST, createUser);\n}\n\nconst userSagas = [fork(watchGetUsersRequest), fork(watchDeleteUserRequest), fork(watchCreateUserRequest)];\nexport default userSagas;","map":{"version":3,"sources":["/Users/Neil/Projects/geohashing2/src/sagas/users.js"],"names":["takeEvery","takeLatest","take","call","put","fork","actions","api","getUsers","result","getUsersSuccess","items","data","e","usersError","error","watchGetUsersRequest","Types","GET_USERS_REQUEST","deleteUser","userId","watchDeleteUserRequest","payload","DELETE_USER_REQUEST","createUser","firstName","lastName","watchCreateUserRequest","CREATE_USER_REQUEST","userSagas"],"mappings":"AAAA,SAAQA,SAAR,EAAmBC,UAAnB,EAA+BC,IAA/B,EAAqCC,IAArC,EAA2CC,GAA3C,EAAgDC,IAAhD,QAA2D,oBAA3D;AACA,OAAO,KAAKC,OAAZ,MAAyB,kBAAzB;AACA,OAAO,KAAKC,GAAZ,MAAqB,cAArB;;AAEA,UAAUC,QAAV,GAAoB;AACnB,MAAG;AACF,UAAMC,MAAM,GAAG,MAAMN,IAAI,CAACI,GAAG,CAACC,QAAL,CAAzB;AACA,UAAMJ,GAAG,CAACE,OAAO,CAACI,eAAR,CAAwB;AACjCC,MAAAA,KAAK,EAAEF,MAAM,CAACG,IAAP,CAAYA;AADc,KAAxB,CAAD,CAAT;AAGA,GALD,CAKC,OAAMC,CAAN,EAAQ;AACF,UAAMT,GAAG,CAACE,OAAO,CAACQ,UAAR,CAAmB;AACzBC,MAAAA,KAAK,EAAE;AADkB,KAAnB,CAAD,CAAT;AAGN;AACD;;AAED,UAAUC,oBAAV,GAAgC;AAC/B,QAAMhB,SAAS,CAACM,OAAO,CAACW,KAAR,CAAcC,iBAAf,EAAkCV,QAAlC,CAAf;AACA;;AAED,UAAUW,UAAV,CAAqBC,MAArB,EAA4B;AACxB,MAAG;AACC,UAAMjB,IAAI,CAACI,GAAG,CAACY,UAAL,EAAiBC,MAAjB,CAAV;AAEA,UAAMjB,IAAI,CAACK,QAAD,CAAV;AACH,GAJD,CAIC,OAAMK,CAAN,EAAQ;AACL,UAAMT,GAAG,CAACE,OAAO,CAACQ,UAAR,CAAmB;AACzBC,MAAAA,KAAK,EAAE;AADkB,KAAnB,CAAD,CAAT;AAGN;AACD;;AAED,UAAUM,sBAAV,GAAkC;AAC9B,SAAM,IAAN,EAAW;AACP,UAAM;AAACC,MAAAA;AAAD,QAAY,MAAMpB,IAAI,CAACI,OAAO,CAACW,KAAR,CAAcM,mBAAf,CAA5B;AACA,UAAMpB,IAAI,CAACgB,UAAD,EAAaG,OAAO,CAACF,MAArB,CAAV;AACH;AACJ;;AAED,UAAUI,UAAV,CAAqB;AAACF,EAAAA;AAAD,CAArB,EAA+B;AAC3B,MAAG;AACC,UAAMnB,IAAI,CAACI,GAAG,CAACiB,UAAL,EAAiB;AACvBC,MAAAA,SAAS,EAAEH,OAAO,CAACG,SADI;AAEvBC,MAAAA,QAAQ,EAAEJ,OAAO,CAACI;AAFK,KAAjB,CAAV;AAKA,UAAMvB,IAAI,CAACK,QAAD,CAAV;AAEH,GARD,CAQC,OAAMK,CAAN,EAAQ;AACL,UAAMT,GAAG,CAACE,OAAO,CAACQ,UAAR,CAAmB;AACzBC,MAAAA,KAAK,EAAE;AADkB,KAAnB,CAAD,CAAT;AAGH;AACJ;;AAED,UAAUY,sBAAV,GAAkC;AAC9B,QAAM1B,UAAU,CAACK,OAAO,CAACW,KAAR,CAAcW,mBAAf,EAAoCJ,UAApC,CAAhB;AACH;;AAED,MAAMK,SAAS,GAAG,CACjBxB,IAAI,CAACW,oBAAD,CADa,EAEjBX,IAAI,CAACgB,sBAAD,CAFa,EAGjBhB,IAAI,CAACsB,sBAAD,CAHa,CAAlB;AAMA,eAAeE,SAAf","sourcesContent":["import {takeEvery, takeLatest, take, call, put, fork} from 'redux-saga/effects';\nimport * as actions from '../actions/users';\nimport * as api from '../api/users';\n\nfunction* getUsers(){\n\ttry{\n\t\tconst result = yield call(api.getUsers);\n\t\tyield put(actions.getUsersSuccess({\n\t\t\titems: result.data.data\n\t\t}));\n\t}catch(e){\n        yield put(actions.usersError({\n            error: 'An error occurred when trying to get the users'\n        }));\n\t}\n}\n\nfunction* watchGetUsersRequest(){\n\tyield takeEvery(actions.Types.GET_USERS_REQUEST, getUsers);\n}\n\nfunction* deleteUser(userId){\n    try{\n        yield call(api.deleteUser, userId);\n\n        yield call(getUsers);\n    }catch(e){\n        yield put(actions.usersError({\n            error: 'An error occurred when trying to delete the user'\n        }));\n\t}\n}\n\nfunction* watchDeleteUserRequest(){\n    while(true){\n        const {payload} = yield take(actions.Types.DELETE_USER_REQUEST);\n        yield call(deleteUser, payload.userId);\n    }\n}\n\nfunction* createUser({payload}){\n    try{\n        yield call(api.createUser, {\n            firstName: payload.firstName,\n            lastName: payload.lastName\n        });\n\n        yield call(getUsers);\n\n    }catch(e){\n        yield put(actions.usersError({\n            error: 'An error occurred when trying to create the user'\n        }));\n    }\n}\n\nfunction* watchCreateUserRequest(){\n    yield takeLatest(actions.Types.CREATE_USER_REQUEST, createUser);\n}\n\nconst userSagas = [\n\tfork(watchGetUsersRequest),\n\tfork(watchDeleteUserRequest),\n\tfork(watchCreateUserRequest)\n];\n\nexport default userSagas;"]},"metadata":{},"sourceType":"module"}