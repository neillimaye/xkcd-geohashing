{"ast":null,"code":"import _classCallCheck from \"/Users/Neil/Projects/xkcd-geohashing/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/Neil/Projects/xkcd-geohashing/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/Neil/Projects/xkcd-geohashing/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/Neil/Projects/xkcd-geohashing/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/Neil/Projects/xkcd-geohashing/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/Neil/Projects/xkcd-geohashing/src/components/MapContainer.js\";\nimport { Map, Marker, GoogleApiWrapper } from 'google-maps-react';\nimport React, { Component } from 'react';\nimport md5 from 'md5';\nimport { Button } from 'reactstrap';\nexport var MapContainer =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(MapContainer, _Component);\n\n  function MapContainer() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, MapContainer);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(MapContainer)).call.apply(_getPrototypeOf2, [this].concat(args)));\n\n    _this.getGeohash = function () {\n      // the math behind finding the geohashing coordinates\n      console.log(_this.props);\n      var lat = String(parseInt(_this.props.coords.lat));\n      var lng = String(parseInt(_this.props.coords.lng));\n      var stringToHash = String(_this.props.date) + '-' + String(_this.props.data);\n      var hashResult = md5(stringToHash);\n      var pt1 = hashResult.slice(0, hashResult.length / 2);\n      var pt2 = hashResult.slice(hashResult.length / 2);\n      var todec1 = parseInt(pt1, 16);\n      var todec2 = parseInt(pt2, 16);\n      var meetupCoordinates = {\n        lat: lat + '.' + todec1,\n        lng: lng + '.' + todec2\n      };\n      console.log(meetupCoordinates);\n      _this.meetupCoords = meetupCoordinates;\n    };\n\n    return _this;\n  }\n\n  _createClass(MapContainer, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this.meetupCoords = this.props.coords;\n    }\n  }, {\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate() {\n      this.getGeohash();\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      console.log(this.props);\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 36\n        },\n        __self: this\n      }, React.createElement(Button, {\n        onClick: this.getGeohash,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 37\n        },\n        __self: this\n      }, \"Get Coordinates\"), React.createElement(Map, {\n        google: this.props.google,\n        center: this.meetupCoords,\n        zoom: 15,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 38\n        },\n        __self: this\n      }, React.createElement(Marker, {\n        title: 'This is your meetup location.',\n        position: this.meetupCoords,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 39\n        },\n        __self: this\n      })));\n    }\n  }]);\n\n  return MapContainer;\n}(Component);\nexport default GoogleApiWrapper({\n  apiKey: 'AIzaSyAquoUs4NfM4dxHs2V2Ja8jxmeYy1Dw9so'\n})(MapContainer);","map":{"version":3,"sources":["/Users/Neil/Projects/xkcd-geohashing/src/components/MapContainer.js"],"names":["Map","Marker","GoogleApiWrapper","React","Component","md5","Button","MapContainer","getGeohash","console","log","props","lat","String","parseInt","coords","lng","stringToHash","date","data","hashResult","pt1","slice","length","pt2","todec1","todec2","meetupCoordinates","meetupCoords","google","apiKey"],"mappings":";;;;;;AAAA,SAAQA,GAAR,EAAaC,MAAb,EAAqBC,gBAArB,QAA4C,mBAA5C;AACA,OAAOC,KAAP,IAAgBC,SAAhB,QAAgC,OAAhC;AACA,OAAOC,GAAP,MAAgB,KAAhB;AACA,SAAQC,MAAR,QAAqB,YAArB;AAEA,WAAaC,YAAb;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;;AAAA;;AAAA;AAAA;AAAA;;AAAA;;AAAA,UAMEC,UANF,GAMe,YAAK;AAChB;AACAC,MAAAA,OAAO,CAACC,GAAR,CAAY,MAAKC,KAAjB;AACA,UAAIC,GAAG,GAAGC,MAAM,CAACC,QAAQ,CAAC,MAAKH,KAAL,CAAWI,MAAX,CAAkBH,GAAnB,CAAT,CAAhB;AACA,UAAII,GAAG,GAAGH,MAAM,CAACC,QAAQ,CAAC,MAAKH,KAAL,CAAWI,MAAX,CAAkBC,GAAnB,CAAT,CAAhB;AACA,UAAIC,YAAY,GAAGJ,MAAM,CAAC,MAAKF,KAAL,CAAWO,IAAZ,CAAN,GAA0B,GAA1B,GAAgCL,MAAM,CAAC,MAAKF,KAAL,CAAWQ,IAAZ,CAAzD;AACA,UAAIC,UAAU,GAAGf,GAAG,CAACY,YAAD,CAApB;AACA,UAAII,GAAG,GAAGD,UAAU,CAACE,KAAX,CAAiB,CAAjB,EAAmBF,UAAU,CAACG,MAAX,GAAkB,CAArC,CAAV;AACA,UAAIC,GAAG,GAAGJ,UAAU,CAACE,KAAX,CAAiBF,UAAU,CAACG,MAAX,GAAkB,CAAnC,CAAV;AACA,UAAIE,MAAM,GAAGX,QAAQ,CAACO,GAAD,EAAK,EAAL,CAArB;AACA,UAAIK,MAAM,GAAGZ,QAAQ,CAACU,GAAD,EAAK,EAAL,CAArB;AACA,UAAMG,iBAAiB,GAAG;AACxBf,QAAAA,GAAG,EAAEA,GAAG,GAAC,GAAJ,GAAQa,MADW;AAExBT,QAAAA,GAAG,EAAEA,GAAG,GAAC,GAAJ,GAAQU;AAFW,OAA1B;AAIAjB,MAAAA,OAAO,CAACC,GAAR,CAAYiB,iBAAZ;AACA,YAAKC,YAAL,GAAoBD,iBAApB;AACD,KAvBH;;AAAA;AAAA;;AAAA;AAAA;AAAA,wCAGqB;AACjB,WAAKC,YAAL,GAAoB,KAAKjB,KAAL,CAAWI,MAA/B;AACD;AALH;AAAA;AAAA,yCAwBsB;AAClB,WAAKP,UAAL;AACD;AA1BH;AAAA;AAAA,6BA2BS;AACPC,MAAAA,OAAO,CAACC,GAAR,CAAY,KAAKC,KAAjB;AACA,aACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE,oBAAC,MAAD;AAAQ,QAAA,OAAO,EAAG,KAAKH,UAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,2BADF,EAEE,oBAAC,GAAD;AAAK,QAAA,MAAM,EAAE,KAAKG,KAAL,CAAWkB,MAAxB;AAAgC,QAAA,MAAM,EAAE,KAAKD,YAA7C;AAA2D,QAAA,IAAI,EAAE,EAAjE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE,oBAAC,MAAD;AACC,QAAA,KAAK,EAAE,+BADR;AAEC,QAAA,QAAQ,EAAE,KAAKA,YAFhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADF,CAFF,CADF;AAUA;AAvCF;;AAAA;AAAA,EAAkCxB,SAAlC;AA0CA,eAAeF,gBAAgB,CAAC;AAC9B4B,EAAAA,MAAM,EAAE;AADsB,CAAD,CAAhB,CAEZvB,YAFY,CAAf","sourcesContent":["import {Map, Marker, GoogleApiWrapper} from 'google-maps-react';\nimport React, { Component} from 'react';\nimport md5 from 'md5'\nimport {Button} from 'reactstrap'\n\nexport class MapContainer extends Component {\n\n\n  componentDidMount(){\n    this.meetupCoords = this.props.coords;\n  }\n  getGeohash = () =>{\n    // the math behind finding the geohashing coordinates\n    console.log(this.props)\n    let lat = String(parseInt(this.props.coords.lat));\n    let lng = String(parseInt(this.props.coords.lng));\n    let stringToHash = String(this.props.date) + '-' + String(this.props.data) ;\n    let hashResult = md5(stringToHash)\n    let pt1 = hashResult.slice(0,hashResult.length/2)\n    let pt2 = hashResult.slice(hashResult.length/2)\n    let todec1 = parseInt(pt1,16)\n    let todec2 = parseInt(pt2,16)\n    const meetupCoordinates = {\n      lat: lat+'.'+todec1,\n      lng: lng+'.'+todec2\n    }\n    console.log(meetupCoordinates)\n    this.meetupCoords = meetupCoordinates;\n  }\n  componentDidUpdate(){\n    this.getGeohash()\n  }\nrender() {\n  console.log(this.props)\n  return (\n    <div>\n      <Button onClick ={this.getGeohash}>Get Coordinates</Button>\n      <Map google={this.props.google} center={this.meetupCoords} zoom={15}>\n        <Marker\n         title={'This is your meetup location.'}\n         position={this.meetupCoords} />\n      </Map>\n    </div>\n );\n }\n}\n\nexport default GoogleApiWrapper({\n  apiKey: 'AIzaSyAquoUs4NfM4dxHs2V2Ja8jxmeYy1Dw9so'\n})(MapContainer)\n"]},"metadata":{},"sourceType":"module"}