{"ast":null,"code":"import _regeneratorRuntime from \"/Users/Neil/Projects/xkcd-geohashing/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/Neil/Projects/xkcd-geohashing/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport axios from 'axios';\nimport moment from 'moment';\nimport _ from 'lodash';\nexport function getDOW(_x) {\n  return _getDOW.apply(this, arguments);\n}\n\nfunction _getDOW() {\n  _getDOW = _asyncToGenerator(\n  /*#__PURE__*/\n  _regeneratorRuntime.mark(function _callee(date) {\n    var startDate, today, daysBetween, options, result, DJIAdata, searchDate, dowOpening;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            // to adjust for different dates, the outputsize value needs to be adjusted accordingly.\n            // new code uses the twelvedata API server, which provides all the information I need\n            // plus I have rapidapi taking care of the overhead, which is nice\n            startDate = moment(date);\n            today = moment().format('YYYY-MM-DD');\n            console.log('line 11');\n            console.log(moment(date).day());\n            daysBetween = -1 * startDate.diff(today, \"days\") + 1;\n            console.log(daysBetween);\n            options = {\n              method: 'GET',\n              url: 'https://twelve-data1.p.rapidapi.com/time_series',\n              params: {\n                symbol: 'DJI',\n                interval: '1day',\n                outputsize: daysBetween,\n                format: 'json'\n              },\n              headers: {\n                'x-rapidapi-key': 'cc072cf6a1mshca7a9fff5bd7131p175ba7jsne97460d453d2',\n                'x-rapidapi-host': 'twelve-data1.p.rapidapi.com'\n              }\n            }; // console.log('checking the past ' + options.params.outputsize + ' days')\n\n            _context.next = 9;\n            return axios.request(options);\n\n          case 9:\n            result = _context.sent;\n            DJIAdata = result.data.values;\n            searchDate = startDate;\n\n            if (date.day() === 6) {\n              //if it's a saturday\n              searchDate = startDate.subtract(1, \"days\");\n            } else if (date.day() === 7) {\n              searchDate = startDate.subtract(2, \"days\");\n            }\n\n            console.log(searchDate);\n            dowOpening = _.find(DJIAdata, {\n              'datetime': moment(searchDate).format('YYYY-MM-DD')\n            });\n            return _context.abrupt(\"return\", dowOpening.open);\n\n          case 16:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee, this);\n  }));\n  return _getDOW.apply(this, arguments);\n}\n\n;","map":{"version":3,"sources":["/Users/Neil/Projects/xkcd-geohashing/src/api/dow.js"],"names":["axios","moment","_","getDOW","date","startDate","today","format","console","log","day","daysBetween","diff","options","method","url","params","symbol","interval","outputsize","headers","request","result","DJIAdata","data","values","searchDate","subtract","dowOpening","find","open"],"mappings":";;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,MAAP,MAAmB,QAAnB;AACA,OAAOC,CAAP,MAAc,QAAd;AAEA,gBAAsBC,MAAtB;AAAA;AAAA;;;;;2BAAO,iBAAsBC,IAAtB;AAAA;AAAA;AAAA;AAAA;AAAA;AACL;AACA;AACA;AACIC,YAAAA,SAJC,GAIWJ,MAAM,CAACG,IAAD,CAJjB;AAKDE,YAAAA,KALC,GAKOL,MAAM,GAAGM,MAAT,CAAgB,YAAhB,CALP;AAMLC,YAAAA,OAAO,CAACC,GAAR,CAAY,SAAZ;AACAD,YAAAA,OAAO,CAACC,GAAR,CAAYR,MAAM,CAACG,IAAD,CAAN,CAAaM,GAAb,EAAZ;AACIC,YAAAA,WARC,GAQa,CAAC,CAAD,GAAKN,SAAS,CAACO,IAAV,CAAeN,KAAf,EAAqB,MAArB,CAAL,GAAmC,CARhD;AASLE,YAAAA,OAAO,CAACC,GAAR,CAAYE,WAAZ;AACIE,YAAAA,OAVC,GAUS;AACdC,cAAAA,MAAM,EAAE,KADM;AAEdC,cAAAA,GAAG,EAAE,iDAFS;AAGdC,cAAAA,MAAM,EAAE;AAACC,gBAAAA,MAAM,EAAE,KAAT;AAAgBC,gBAAAA,QAAQ,EAAE,MAA1B;AAAkCC,gBAAAA,UAAU,EAAER,WAA9C;AAA2DJ,gBAAAA,MAAM,EAAE;AAAnE,eAHM;AAIZa,cAAAA,OAAO,EAAE;AACP,kCAAkB,oDADX;AAEP,mCAAmB;AAFZ;AAJG,aAVT,EAoBL;;AApBK;AAAA,mBAsBcpB,KAAK,CAACqB,OAAN,CAAcR,OAAd,CAtBd;;AAAA;AAsBDS,YAAAA,MAtBC;AAuBDC,YAAAA,QAvBC,GAuBUD,MAAM,CAACE,IAAP,CAAYC,MAvBtB;AAwBDC,YAAAA,UAxBC,GAwBYrB,SAxBZ;;AA0BL,gBAAID,IAAI,CAACM,GAAL,OAAe,CAAnB,EAAqB;AAAE;AACrBgB,cAAAA,UAAU,GAAGrB,SAAS,CAACsB,QAAV,CAAmB,CAAnB,EAAsB,MAAtB,CAAb;AACD,aAFD,MAEM,IAAIvB,IAAI,CAACM,GAAL,OAAe,CAAnB,EAAsB;AAC1BgB,cAAAA,UAAU,GAAGrB,SAAS,CAACsB,QAAV,CAAmB,CAAnB,EAAsB,MAAtB,CAAb;AACD;;AACDnB,YAAAA,OAAO,CAACC,GAAR,CAAYiB,UAAZ;AACIE,YAAAA,UAhCC,GAgCY1B,CAAC,CAAC2B,IAAF,CAAON,QAAP,EAAiB;AAAC,0BAAWtB,MAAM,CAACyB,UAAD,CAAN,CAAmBnB,MAAnB,CAA0B,YAA1B;AAAZ,aAAjB,CAhCZ;AAAA,6CAiCEqB,UAAU,CAACE,IAjCb;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G;;;;AAkCN","sourcesContent":["import axios from 'axios';\nimport moment from 'moment';\nimport _ from 'lodash'\n\nexport async function getDOW(date){\n  // to adjust for different dates, the outputsize value needs to be adjusted accordingly.\n  // new code uses the twelvedata API server, which provides all the information I need\n  // plus I have rapidapi taking care of the overhead, which is nice\n  let startDate = moment(date)\n  let today = moment().format('YYYY-MM-DD')\n  console.log('line 11')\n  console.log(moment(date).day())\n  let daysBetween = -1 * startDate.diff(today,\"days\") +1\n  console.log(daysBetween)\n  let options = {\n  method: 'GET',\n  url: 'https://twelve-data1.p.rapidapi.com/time_series',\n  params: {symbol: 'DJI', interval: '1day', outputsize: daysBetween, format: 'json'},\n    headers: {\n      'x-rapidapi-key': 'cc072cf6a1mshca7a9fff5bd7131p175ba7jsne97460d453d2',\n      'x-rapidapi-host': 'twelve-data1.p.rapidapi.com'\n    }\n  };\n\n  // console.log('checking the past ' + options.params.outputsize + ' days')\n\n  let result = await axios.request(options)\n  let DJIAdata = result.data.values;\n  let searchDate = startDate;\n\n  if (date.day() === 6){ //if it's a saturday\n    searchDate = startDate.subtract(1, \"days\");\n  }else if (date.day() === 7) {\n    searchDate = startDate.subtract(2, \"days\");\n  }\n  console.log(searchDate)\n  let dowOpening = _.find(DJIAdata, {'datetime':moment(searchDate).format('YYYY-MM-DD')})\n  return dowOpening.open\n};\n"]},"metadata":{},"sourceType":"module"}