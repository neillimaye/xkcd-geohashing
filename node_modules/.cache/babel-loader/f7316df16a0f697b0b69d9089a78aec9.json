{"ast":null,"code":"import _regeneratorRuntime from \"/Users/Neil/Projects/xkcd-geohashing/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/Neil/Projects/xkcd-geohashing/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"/Users/Neil/Projects/xkcd-geohashing/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/Neil/Projects/xkcd-geohashing/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/Neil/Projects/xkcd-geohashing/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/Neil/Projects/xkcd-geohashing/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/Neil/Projects/xkcd-geohashing/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/Neil/Projects/xkcd-geohashing/src/components/App.js\";\nimport React from 'react';\nimport { Form, Button, Input, Card, CardText, CardBody, CardTitle, CardSubtitle } from 'reactstrap';\nimport { connect } from 'react-redux';\nimport { getDOWRequest } from '../actions/dow';\nimport { getCoordsRequest } from '../actions/coords';\nimport { getZIPRequest } from '../actions/zip';\nimport { changeDate } from '../actions/date';\nimport { changeZIP } from '../actions/zip';\nimport { bindActionCreators } from 'redux';\nimport moment from 'moment';\nimport MapContainer from './MapContainer';\n\nvar App =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(App, _React$Component);\n\n  function App() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, App);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(App)).call.apply(_getPrototypeOf2, [this].concat(args)));\n\n    _this.handleSubmit = function () {\n      _this.props.getDOWRequest(_this.props.date);\n    };\n\n    _this.handleDateInput = function (e) {\n      _this.props.changeDate(e.target.value);\n    };\n\n    _this.doToday = function () {\n      _this.props.changeDate(moment().format('YYYY-MM-DD'));\n    };\n\n    _this.handleZIPInput = function (e) {\n      // console.log(e.target.value)\n      _this.props.changeZIP(e.target.value);\n    };\n\n    _this.ZIPtoCoordinates = function (e) {\n      // console.log('ZIPtoCoordinates')\n      // console.log(this.props.zip)\n      _this.props.getCoordsRequest(_this.props.zip);\n    };\n\n    _this.CoordstoZip = function (coords) {\n      _this.props.getZIPRequest(coords);\n    };\n\n    _this.getBrowserCoordinates =\n    /*#__PURE__*/\n    _asyncToGenerator(\n    /*#__PURE__*/\n    _regeneratorRuntime.mark(function _callee() {\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return navigator.geolocation.getCurrentPosition(_this.showBrowserCoordinates);\n\n            case 2:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee, this);\n    }));\n\n    _this.showBrowserCoordinates =\n    /*#__PURE__*/\n    function () {\n      var _ref2 = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee2(position) {\n        var lat, lng;\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                _context2.next = 2;\n                return position.coords.latitude;\n\n              case 2:\n                lat = _context2.sent;\n                _context2.next = 5;\n                return position.coords.longitude;\n\n              case 5:\n                lng = _context2.sent;\n\n              case 6:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n\n      return function (_x) {\n        return _ref2.apply(this, arguments);\n      };\n    }();\n\n    return _this;\n  }\n\n  _createClass(App, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {}\n  }, {\n    key: \"renderMapContainer\",\n    value: function renderMapContainer() {\n      return React.createElement(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 53\n        },\n        __self: this\n      }, \"this is a placeholder for the map component\");\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return React.createElement(\"div\", {\n        className: \"App\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 59\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 60\n        },\n        __self: this\n      }, React.createElement(Form, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 61\n        },\n        __self: this\n      }, React.createElement(Input, {\n        type: \"date\",\n        onChange: this.handleDateInput,\n        max: moment().format(\"YYYY-MM-DD\"),\n        value: this.props.date,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 62\n        },\n        __self: this\n      }), React.createElement(Button, {\n        color: \"primary\",\n        onClick: this.handleSubmit,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 63\n        },\n        __self: this\n      }, \"Submit\"), React.createElement(\"p\", {\n        color: \"secondary\",\n        onClick: this.doToday,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 64\n        },\n        __self: this\n      }, \" Or just use today's date.\")), React.createElement(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 66\n        },\n        __self: this\n      }, \" The most recent DOW opening for that day is \", this.props.data, \" \"), React.createElement(Form, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 67\n        },\n        __self: this\n      }, React.createElement(Input, {\n        onChange: this.handleZIPInput,\n        maxLength: \"9\",\n        value: this.props.zip,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 68\n        },\n        __self: this\n      }), React.createElement(Button, {\n        color: \"primary\",\n        onClick: this.ZIPtoCoordinates,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 69\n        },\n        __self: this\n      }, \"Submit\")), React.createElement(Form, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 71\n        },\n        __self: this\n      }, React.createElement(Button, {\n        color: \"primary\",\n        onClick: this.getBrowserCoordinates,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 72\n        },\n        __self: this\n      }, \"Get location from browser\")), React.createElement(Card, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 76\n        },\n        __self: this\n      }, React.createElement(CardBody, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 77\n        },\n        __self: this\n      }, React.createElement(CardTitle, {\n        tag: \"h5\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 78\n        },\n        __self: this\n      }), React.createElement(CardSubtitle, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 79\n        },\n        __self: this\n      }, \" \"), React.createElement(CardText, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 80\n        },\n        __self: this\n      }))), this.renderMapContainer()));\n    }\n  }]);\n\n  return App;\n}(React.Component);\n\nfunction mapStateToProps(state) {\n  return {\n    data: state.dowReducer.data,\n    date: state.dateReducer.date,\n    zip: state.ZIPReducer.zip,\n    coords: state.coordsReducer.coords\n  };\n}\n\nfunction mapDispatchToProps(dispatch) {\n  return bindActionCreators({\n    getDOWRequest: getDOWRequest,\n    changeDate: changeDate,\n    changeZIP: changeZIP,\n    getCoordsRequest: getCoordsRequest\n  }, dispatch);\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);","map":{"version":3,"sources":["/Users/Neil/Projects/xkcd-geohashing/src/components/App.js"],"names":["React","Form","Button","Input","Card","CardText","CardBody","CardTitle","CardSubtitle","connect","getDOWRequest","getCoordsRequest","getZIPRequest","changeDate","changeZIP","bindActionCreators","moment","MapContainer","App","handleSubmit","props","date","handleDateInput","e","target","value","doToday","format","handleZIPInput","ZIPtoCoordinates","zip","CoordstoZip","coords","getBrowserCoordinates","navigator","geolocation","getCurrentPosition","showBrowserCoordinates","position","latitude","lat","longitude","lng","data","renderMapContainer","Component","mapStateToProps","state","dowReducer","dateReducer","ZIPReducer","coordsReducer","mapDispatchToProps","dispatch"],"mappings":"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","sourcesContent":["import React from 'react'\nimport {Form, Button, Input, Card, CardText, CardBody,\n  CardTitle, CardSubtitle} from 'reactstrap';\nimport {connect} from 'react-redux';\nimport {getDOWRequest} from '../actions/dow'\nimport {getCoordsRequest} from '../actions/coords'\nimport {getZIPRequest} from '../actions/zip'\n\nimport {changeDate} from '../actions/date'\nimport {changeZIP} from '../actions/zip'\nimport {bindActionCreators} from 'redux'\nimport moment from 'moment'\nimport MapContainer from './MapContainer'\n\nclass App extends React.Component {\n\n  handleSubmit = () => {\n    this.props.getDOWRequest(this.props.date);\n  }\n  handleDateInput = (e) =>{\n    this.props.changeDate(e.target.value);\n  }\n  doToday = () =>  {\n    this.props.changeDate(moment().format('YYYY-MM-DD'));\n  }\n  handleZIPInput = (e) => {\n    // console.log(e.target.value)\n    this.props.changeZIP(e.target.value);\n  }\n  ZIPtoCoordinates = (e) =>{\n    // console.log('ZIPtoCoordinates')\n    // console.log(this.props.zip)\n    this.props.getCoordsRequest(this.props.zip)\n  }\n  CoordstoZip = (coords) =>{\n    this.props.getZIPRequest(coords)\n  }\n\n  getBrowserCoordinates = async () =>{\n    // console.log('getting browser coordinates')\n    await navigator.geolocation.getCurrentPosition(this.showBrowserCoordinates);\n  }\n  showBrowserCoordinates = async (position) =>{\n    let lat = await position.coords.latitude;\n    let lng = await position.coords.longitude;\n\n  }\n  componentDidMount(){\n\n  }\n  renderMapContainer(){\n    return(\n    <p>this is a placeholder for the map component</p>\n\n    )\n  }\n  render(){\n    return (\n      <div className=\"App\">\n        <div>\n        <Form>\n          <Input type=\"date\" onChange={this.handleDateInput} max={moment().format(\"YYYY-MM-DD\")} value = {this.props.date}/>\n          <Button color=\"primary\" onClick = {this.handleSubmit}>Submit</Button>\n          <p color=\"secondary\" onClick = {this.doToday}> Or just use today's date.</p>\n        </Form>\n          <p> The most recent DOW opening for that day is {this.props.data} </p>\n          <Form>\n            <Input onChange={this.handleZIPInput} maxLength=\"9\" value={this.props.zip} />\n              <Button color=\"primary\" onClick = {this.ZIPtoCoordinates}>Submit</Button>\n          </Form>\n        <Form>\n          <Button color=\"primary\" onClick = {this.getBrowserCoordinates}>Get location from browser</Button>\n\n        </Form>\n\n        <Card>\n          <CardBody>\n           <CardTitle tag=\"h5\"></CardTitle>\n            <CardSubtitle> </ CardSubtitle>\n            <CardText></CardText>\n          </CardBody>\n        </Card>\n        {this.renderMapContainer()}\n        </div>\n      </div>\n    );\n  }\n}\n\nfunction mapStateToProps(state){\n  return {\n    data: state.dowReducer.data,\n    date: state.dateReducer.date,\n    zip: state.ZIPReducer.zip,\n    coords: state.coordsReducer.coords,\n  }\n}\nfunction mapDispatchToProps(dispatch){\n  return bindActionCreators({\n    getDOWRequest: getDOWRequest,\n    changeDate: changeDate,\n    changeZIP: changeZIP,\n    getCoordsRequest: getCoordsRequest,\n  }, dispatch)\n}\nexport default connect(mapStateToProps,mapDispatchToProps)(App)\n"]},"metadata":{},"sourceType":"module"}