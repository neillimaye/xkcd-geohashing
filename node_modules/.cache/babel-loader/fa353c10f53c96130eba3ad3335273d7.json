{"ast":null,"code":"import _regeneratorRuntime from \"/Users/Neil/Projects/xkcd-geohashing/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\n\nvar _marked =\n/*#__PURE__*/\n_regeneratorRuntime.mark(getDOW),\n    _marked2 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(watchGetDOWRequest);\n\nimport { takeLatest, call, put, fork } from 'redux-saga/effects';\nimport * as actions from '../actions/dow';\nimport * as api from '../api/dow';\nimport { Types } from '../actions/dow';\n\nfunction getDOW() {\n  var result;\n  return _regeneratorRuntime.wrap(function getDOW$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.prev = 0;\n          _context.next = 3;\n          return call(api.getDOW);\n\n        case 3:\n          result = _context.sent;\n          _context.next = 6;\n          return put({\n            type: Types.GET_DOW_SUCCESS,\n            payload: result\n          });\n\n        case 6:\n          _context.next = 11;\n          break;\n\n        case 8:\n          _context.prev = 8;\n          _context.t0 = _context[\"catch\"](0);\n          console.log('error');\n\n        case 11:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, _marked, this, [[0, 8]]);\n}\n\nfunction watchGetDOWRequest() {\n  return _regeneratorRuntime.wrap(function watchGetDOWRequest$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          if (!true) {\n            _context2.next = 5;\n            break;\n          }\n\n          _context2.next = 3;\n          return takeLatest(actions.Types.GET_DOW_REQUEST, getDOW(date));\n\n        case 3:\n          _context2.next = 0;\n          break;\n\n        case 5:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, _marked2, this);\n}\n\nvar DOWSagas = [fork(watchGetDOWRequest)];\nexport default DOWSagas;","map":{"version":3,"sources":["/Users/Neil/Projects/xkcd-geohashing/src/sagas/dow.js"],"names":["getDOW","watchGetDOWRequest","takeLatest","call","put","fork","actions","api","Types","result","type","GET_DOW_SUCCESS","payload","console","log","GET_DOW_REQUEST","date","DOWSagas"],"mappings":";;;;yBAMUA,M;;;yBAaAC,kB;;AAnBV,SAAQC,UAAR,EAAoBC,IAApB,EAA0BC,GAA1B,EAA+BC,IAA/B,QAA0C,oBAA1C;AACA,OAAO,KAAKC,OAAZ,MAAyB,gBAAzB;AACA,OAAO,KAAKC,GAAZ,MAAqB,YAArB;AACA,SAAQC,KAAR,QAAoB,gBAApB;;AAGA,SAAUR,MAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEiB,iBAAMG,IAAI,CAACI,GAAG,CAACP,MAAL,CAAV;;AAFjB;AAEQS,UAAAA,MAFR;AAAA;AAIE,iBAAML,GAAG,CAAC;AACTM,YAAAA,IAAI,EAAEF,KAAK,CAACG,eADH;AAETC,YAAAA,OAAO,EAAEH;AAFA,WAAD,CAAT;;AAJF;AAAA;AAAA;;AAAA;AAAA;AAAA;AASMI,UAAAA,OAAO,CAACC,GAAR,CAAY,OAAZ;;AATN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAaA,SAAUb,kBAAV;AAAA;AAAA;AAAA;AAAA;AAAA,eAIO,IAJP;AAAA;AAAA;AAAA;;AAAA;AAKE,iBAAMC,UAAU,CAACI,OAAO,CAACE,KAAR,CAAcO,eAAf,EAAgCf,MAAM,CAACgB,IAAD,CAAtC,CAAhB;;AALF;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAUA,IAAMC,QAAQ,GAAG,CAChBZ,IAAI,CAACJ,kBAAD,CADY,CAAjB;AAIA,eAAegB,QAAf","sourcesContent":["import {takeLatest, call, put, fork} from 'redux-saga/effects';\nimport * as actions from '../actions/dow';\nimport * as api from '../api/dow';\nimport {Types} from '../actions/dow';\n\n\nfunction* getDOW(){\n\ttry{\n\t\tconst result = yield call(api.getDOW);\n\t\t// console.log('successful saga execution')\n\t\tyield put({\n\t\t\ttype: Types.GET_DOW_SUCCESS,\n\t\t\tpayload: result\n\t\t})\n\t}catch(e){\n      console.log('error')\n\t}\n}\n\nfunction* watchGetDOWRequest(){\n\t// console.log('watching getdow saga call')\n\t//take the latest request action called and then call the getDow function\n\t//taking the latest because we want to adjust for when people update the date they put in\n\twhile(true){\n\t\tyield takeLatest(actions.Types.GET_DOW_REQUEST, getDOW(date));\n\t}\n\n}\n\nconst DOWSagas = [\n\tfork(watchGetDOWRequest),\n];\n\nexport default DOWSagas;\n"]},"metadata":{},"sourceType":"module"}