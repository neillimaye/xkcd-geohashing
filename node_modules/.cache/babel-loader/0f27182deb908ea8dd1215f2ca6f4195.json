{"ast":null,"code":"import _regeneratorRuntime from \"/Users/Neil/Projects/xkcd-geohashing/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/Neil/Projects/xkcd-geohashing/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport axios from 'axios';\nimport moment from 'moment';\nexport function getDOW(_x) {\n  return _getDOW.apply(this, arguments);\n}\n\nfunction _getDOW() {\n  _getDOW = _asyncToGenerator(\n  /*#__PURE__*/\n  _regeneratorRuntime.mark(function _callee(date) {\n    var options;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            // to adjust for different dates, the outputsize value needs to be adjusted accordingly.\n            // new code uses the twelvedata API server, which provides all the information I need\n            // plus I have rapidapi taking care of the overhead, which is nice\n            options = {\n              method: 'GET',\n              url: 'https://twelve-data1.p.rapidapi.com/time_series',\n              params: {\n                symbol: 'DJI',\n                interval: '1day',\n                outputsize: '3',\n                format: 'json'\n              },\n              headers: {\n                'x-rapidapi-key': 'cc072cf6a1mshca7a9fff5bd7131p175ba7jsne97460d453d2',\n                'x-rapidapi-host': 'twelve-data1.p.rapidapi.com'\n              }\n            };\n            axios.request(options).then(function (response) {\n              console.log(response.data);\n              return response.data;\n            }).catch(function (error) {\n              console.error(error);\n            });\n\n          case 2:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee, this);\n  }));\n  return _getDOW.apply(this, arguments);\n}\n\n;","map":{"version":3,"sources":["/Users/Neil/Projects/xkcd-geohashing/src/api/dow.js"],"names":["axios","moment","getDOW","date","options","method","url","params","symbol","interval","outputsize","format","headers","request","then","response","console","log","data","catch","error"],"mappings":";;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,MAAP,MAAmB,QAAnB;AAEA,gBAAsBC,MAAtB;AAAA;AAAA;;;;;2BAAO,iBAAsBC,IAAtB;AAAA;AAAA;AAAA;AAAA;AAAA;AACL;AACA;AACA;AACIC,YAAAA,OAJC,GAIS;AACdC,cAAAA,MAAM,EAAE,KADM;AAEdC,cAAAA,GAAG,EAAE,iDAFS;AAGdC,cAAAA,MAAM,EAAE;AAACC,gBAAAA,MAAM,EAAE,KAAT;AAAgBC,gBAAAA,QAAQ,EAAE,MAA1B;AAAkCC,gBAAAA,UAAU,EAAE,GAA9C;AAAmDC,gBAAAA,MAAM,EAAE;AAA3D,eAHM;AAIZC,cAAAA,OAAO,EAAE;AACP,kCAAkB,oDADX;AAEP,mCAAmB;AAFZ;AAJG,aAJT;AAiBLZ,YAAAA,KAAK,CAACa,OAAN,CAAcT,OAAd,EAAuBU,IAAvB,CAA4B,UAAUC,QAAV,EAAoB;AAC/CC,cAAAA,OAAO,CAACC,GAAR,CAAYF,QAAQ,CAACG,IAArB;AACC,qBAAOH,QAAQ,CAACG,IAAhB;AACD,aAHD,EAGGC,KAHH,CAGS,UAAUC,KAAV,EAAiB;AACzBJ,cAAAA,OAAO,CAACI,KAAR,CAAcA,KAAd;AACA,aALD;;AAjBK;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G;;;;AAyBN","sourcesContent":["import axios from 'axios';\nimport moment from 'moment'\n\nexport async function getDOW(date){\n  // to adjust for different dates, the outputsize value needs to be adjusted accordingly.\n  // new code uses the twelvedata API server, which provides all the information I need\n  // plus I have rapidapi taking care of the overhead, which is nice\n  let options = {\n  method: 'GET',\n  url: 'https://twelve-data1.p.rapidapi.com/time_series',\n  params: {symbol: 'DJI', interval: '1day', outputsize: '3', format: 'json'},\n    headers: {\n      'x-rapidapi-key': 'cc072cf6a1mshca7a9fff5bd7131p175ba7jsne97460d453d2',\n      'x-rapidapi-host': 'twelve-data1.p.rapidapi.com'\n    }\n  };\n\n\n\n\n  axios.request(options).then(function (response) {\n  \tconsole.log(response.data);\n    return response.data\n  }).catch(function (error) {\n  \tconsole.error(error);\n  });\n\n\n};\n"]},"metadata":{},"sourceType":"module"}