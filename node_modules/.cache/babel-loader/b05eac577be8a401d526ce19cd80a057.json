{"ast":null,"code":"import _regeneratorRuntime from \"/Users/Neil/Projects/xkcd-geohashing/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\n\nvar _marked =\n/*#__PURE__*/\n_regeneratorRuntime.mark(getDOW),\n    _marked2 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(watchGetDOWRequest);\n\nimport { takeLatest, call, put, fork } from 'redux-saga/effects';\nimport * as actions from '../actions/dow';\nimport * as api from '../api/dow';\nimport { Types } from '../actions/dow';\nimport { eventChanel } from 'redux-saga';\nexport var getState = function getState(state) {\n  return state.date;\n};\n\nfunction getDOW() {\n  var result;\n  return _regeneratorRuntime.wrap(function getDOW$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          console.log('saga state check');\n          console.log(getState);\n          _context.prev = 2;\n          _context.next = 5;\n          return call(api.getDOW);\n\n        case 5:\n          result = _context.sent;\n          _context.next = 8;\n          return put({\n            type: Types.GET_DOW_SUCCESS,\n            payload: result\n          });\n\n        case 8:\n          _context.next = 13;\n          break;\n\n        case 10:\n          _context.prev = 10;\n          _context.t0 = _context[\"catch\"](2);\n          console.log('error');\n\n        case 13:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, _marked, this, [[2, 10]]);\n}\n\nfunction watchGetDOWRequest() {\n  return _regeneratorRuntime.wrap(function watchGetDOWRequest$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          _context2.next = 2;\n          return takeLatest(actions.Types.GET_DOW_REQUEST, getDOW);\n\n        case 2:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, _marked2, this);\n}\n\nvar DOWSagas = [fork(watchGetDOWRequest)];\nexport default DOWSagas;","map":{"version":3,"sources":["/Users/Neil/Projects/xkcd-geohashing/src/sagas/dow.js"],"names":["getDOW","watchGetDOWRequest","takeLatest","call","put","fork","actions","api","Types","eventChanel","getState","state","date","console","log","result","type","GET_DOW_SUCCESS","payload","GET_DOW_REQUEST","DOWSagas"],"mappings":";;;;yBAOUA,M;;;yBAeAC,kB;;AAtBV,SAAQC,UAAR,EAAoBC,IAApB,EAA0BC,GAA1B,EAA+BC,IAA/B,QAA0C,oBAA1C;AACA,OAAO,KAAKC,OAAZ,MAAyB,gBAAzB;AACA,OAAO,KAAKC,GAAZ,MAAqB,YAArB;AACA,SAAQC,KAAR,QAAoB,gBAApB;AACA,SAAQC,WAAR,QAA0B,YAA1B;AACA,OAAO,IAAMC,QAAQ,GAAG,SAAXA,QAAW,CAACC,KAAD,EAAW;AAAC,SAAOA,KAAK,CAACC,IAAb;AAAkB,CAA/C;;AAEP,SAAUZ,MAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AACCa,UAAAA,OAAO,CAACC,GAAR,CAAY,kBAAZ;AACAD,UAAAA,OAAO,CAACC,GAAR,CAAYJ,QAAZ;AAFD;AAAA;AAIiB,iBAAMP,IAAI,CAACI,GAAG,CAACP,MAAL,CAAV;;AAJjB;AAIQe,UAAAA,MAJR;AAAA;AAME,iBAAMX,GAAG,CAAC;AACTY,YAAAA,IAAI,EAAER,KAAK,CAACS,eADH;AAETC,YAAAA,OAAO,EAAEH;AAFA,WAAD,CAAT;;AANF;AAAA;AAAA;;AAAA;AAAA;AAAA;AAWMF,UAAAA,OAAO,CAACC,GAAR,CAAY,OAAZ;;AAXN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAeA,SAAUb,kBAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAIC,iBAAMC,UAAU,CAACI,OAAO,CAACE,KAAR,CAAcW,eAAf,EAAgCnB,MAAhC,CAAhB;;AAJD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAOA,IAAMoB,QAAQ,GAAG,CAChBf,IAAI,CAACJ,kBAAD,CADY,CAAjB;AAIA,eAAemB,QAAf","sourcesContent":["import {takeLatest, call, put, fork} from 'redux-saga/effects';\nimport * as actions from '../actions/dow';\nimport * as api from '../api/dow';\nimport {Types} from '../actions/dow';\nimport {eventChanel} from 'redux-saga'\nexport const getState = (state) => {return state.date};\n\nfunction* getDOW(){\n\tconsole.log('saga state check')\n\tconsole.log(getState)\n\ttry{\n\t\tconst result = yield call(api.getDOW);\n\t\t// console.log('successful saga execution')\n\t\tyield put({\n\t\t\ttype: Types.GET_DOW_SUCCESS,\n\t\t\tpayload: result\n\t\t})\n\t}catch(e){\n      console.log('error')\n\t}\n}\n\nfunction* watchGetDOWRequest(){\n\t// console.log('watching getdow saga call')\n\t//take the latest request action called and then call the getDow function\n\t//taking the latest because we want to adjust for when people update the date they put in\n\tyield takeLatest(actions.Types.GET_DOW_REQUEST, getDOW);\n}\n\nconst DOWSagas = [\n\tfork(watchGetDOWRequest),\n];\n\nexport default DOWSagas;\n"]},"metadata":{},"sourceType":"module"}