{"ast":null,"code":"import _regeneratorRuntime from \"/Users/Neil/Projects/xkcd-geohashing/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/Neil/Projects/xkcd-geohashing/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport axios from 'axios';\nimport moment from 'moment';\nimport _ from 'lodash';\nexport function getDOW(_x) {\n  return _getDOW.apply(this, arguments);\n}\n\nfunction _getDOW() {\n  _getDOW = _asyncToGenerator(\n  /*#__PURE__*/\n  _regeneratorRuntime.mark(function _callee(date) {\n    var endDate, today, newOutput, options;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            // to adjust for different dates, the outputsize value needs to be adjusted accordingly.\n            // new code uses the twelvedata API server, which provides all the information I need\n            // plus I have rapidapi taking care of the overhead, which is nice\n            endDate = moment(date.date);\n            today = moment().format('YYYY-MM-DD'); // console.log(endDate)\n            // console.log(today)\n\n            newOutput = -1 * endDate.diff(today, \"days\");\n            options = {\n              method: 'GET',\n              url: 'https://twelve-data1.p.rapidapi.com/time_series',\n              params: {\n                symbol: 'DJI',\n                interval: '1day',\n                outputsize: '10',\n                format: 'json'\n              },\n              headers: {\n                'x-rapidapi-key': 'cc072cf6a1mshca7a9fff5bd7131p175ba7jsne97460d453d2',\n                'x-rapidapi-host': 'twelve-data1.p.rapidapi.com'\n              }\n            };\n\n            if (newOutput > options.params.outputsize) {\n              options.params.outputsize = newOutput;\n            }\n\n            console.log('checking the past ' + options.params.outputsize + ' days');\n            axios.request(options).then(function (response) {\n              var result = response.data.values;\n              return response.data.values;\n            }).catch(function (error) {\n              console.error(error);\n            });\n\n          case 7:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee, this);\n  }));\n  return _getDOW.apply(this, arguments);\n}\n\n;","map":{"version":3,"sources":["/Users/Neil/Projects/xkcd-geohashing/src/api/dow.js"],"names":["axios","moment","_","getDOW","date","endDate","today","format","newOutput","diff","options","method","url","params","symbol","interval","outputsize","headers","console","log","request","then","response","result","data","values","catch","error"],"mappings":";;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,MAAP,MAAmB,QAAnB;AACA,OAAOC,CAAP,MAAc,QAAd;AAEA,gBAAsBC,MAAtB;AAAA;AAAA;;;;;2BAAO,iBAAsBC,IAAtB;AAAA;AAAA;AAAA;AAAA;AAAA;AACL;AACA;AACA;AACIC,YAAAA,OAJC,GAISJ,MAAM,CAACG,IAAI,CAACA,IAAN,CAJf;AAKDE,YAAAA,KALC,GAKOL,MAAM,GAAGM,MAAT,CAAgB,YAAhB,CALP,EAML;AACA;;AACIC,YAAAA,SARC,GAQW,CAAC,CAAD,GAAKH,OAAO,CAACI,IAAR,CAAaH,KAAb,EAAmB,MAAnB,CARhB;AASDI,YAAAA,OATC,GASS;AACdC,cAAAA,MAAM,EAAE,KADM;AAEdC,cAAAA,GAAG,EAAE,iDAFS;AAGdC,cAAAA,MAAM,EAAE;AAACC,gBAAAA,MAAM,EAAE,KAAT;AAAgBC,gBAAAA,QAAQ,EAAE,MAA1B;AAAkCC,gBAAAA,UAAU,EAAE,IAA9C;AAAoDT,gBAAAA,MAAM,EAAE;AAA5D,eAHM;AAIZU,cAAAA,OAAO,EAAE;AACP,kCAAkB,oDADX;AAEP,mCAAmB;AAFZ;AAJG,aATT;;AAkBL,gBAAIT,SAAS,GAAEE,OAAO,CAACG,MAAR,CAAeG,UAA9B,EAAyC;AACvCN,cAAAA,OAAO,CAACG,MAAR,CAAeG,UAAf,GAA4BR,SAA5B;AACD;;AAEDU,YAAAA,OAAO,CAACC,GAAR,CAAY,uBAAuBT,OAAO,CAACG,MAAR,CAAeG,UAAtC,GAAmD,OAA/D;AAKAhB,YAAAA,KAAK,CAACoB,OAAN,CAAcV,OAAd,EAAuBW,IAAvB,CAA4B,UAAUC,QAAV,EAAoB;AAC/C,kBAAIC,MAAM,GAAGD,QAAQ,CAACE,IAAT,CAAcC,MAA3B;AAEC,qBAAOH,QAAQ,CAACE,IAAT,CAAcC,MAArB;AACD,aAJD,EAIGC,KAJH,CAIS,UAAUC,KAAV,EAAiB;AACzBT,cAAAA,OAAO,CAACS,KAAR,CAAcA,KAAd;AACA,aAND;;AA3BK;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G;;;;AAoCN","sourcesContent":["import axios from 'axios';\nimport moment from 'moment';\nimport _ from 'lodash'\n\nexport async function getDOW(date){\n  // to adjust for different dates, the outputsize value needs to be adjusted accordingly.\n  // new code uses the twelvedata API server, which provides all the information I need\n  // plus I have rapidapi taking care of the overhead, which is nice\n  let endDate = moment(date.date)\n  let today = moment().format('YYYY-MM-DD')\n  // console.log(endDate)\n  // console.log(today)\n  let newOutput = -1 * endDate.diff(today,\"days\")\n  let options = {\n  method: 'GET',\n  url: 'https://twelve-data1.p.rapidapi.com/time_series',\n  params: {symbol: 'DJI', interval: '1day', outputsize: '10', format: 'json'},\n    headers: {\n      'x-rapidapi-key': 'cc072cf6a1mshca7a9fff5bd7131p175ba7jsne97460d453d2',\n      'x-rapidapi-host': 'twelve-data1.p.rapidapi.com'\n    }\n  };\n  if (newOutput> options.params.outputsize){\n    options.params.outputsize = newOutput;\n  }\n\n  console.log('checking the past ' + options.params.outputsize + ' days')\n\n\n\n\n  axios.request(options).then(function (response) {\n  \tlet result = response.data.values\n\n    return response.data.values\n  }).catch(function (error) {\n  \tconsole.error(error);\n  });\n\n\n};\n"]},"metadata":{},"sourceType":"module"}