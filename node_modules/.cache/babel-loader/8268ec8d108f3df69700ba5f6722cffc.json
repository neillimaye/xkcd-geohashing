{"ast":null,"code":"import _regeneratorRuntime from \"/Users/Neil/Projects/xkcd-geohashing/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/Neil/Projects/xkcd-geohashing/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"/Users/Neil/Projects/xkcd-geohashing/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/Neil/Projects/xkcd-geohashing/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/Neil/Projects/xkcd-geohashing/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/Neil/Projects/xkcd-geohashing/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/Neil/Projects/xkcd-geohashing/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/Neil/Projects/xkcd-geohashing/src/components/App.js\";\nimport React from 'react';\nimport { Form, Button, Input, Card, CardTitle, CardSubtitle, CardBody, Row, Col } from 'reactstrap';\nimport { connect } from 'react-redux';\nimport { getDOWRequest } from '../actions/dow';\nimport { getCoordsRequest } from '../actions/coords';\nimport { getZIPRequest } from '../actions/zip';\nimport { changeDate } from '../actions/date';\nimport { changeZIP } from '../actions/zip';\nimport { bindActionCreators } from 'redux';\nimport moment from 'moment';\nimport MapContainer from './MapContainer';\n\nvar App =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(App, _React$Component);\n\n  function App() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, App);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(App)).call.apply(_getPrototypeOf2, [this].concat(args)));\n\n    _this.getDOWOpening = function () {\n      _this.props.getDOWRequest(_this.props.date);\n    };\n\n    _this.handleDateInput = function (e) {\n      _this.props.changeDate(e.target.value);\n    };\n\n    _this.doToday = function () {\n      _this.props.changeDate(moment().format('YYYY-MM-DD'));\n    };\n\n    _this.handleZIPInput = function (e) {\n      // console.log(e.target.value)\n      _this.props.changeZIP(e.target.value);\n    };\n\n    _this.ZIPtoCoordinates = function () {\n      // console.log('ZIPtoCoordinates')\n      // console.log(this.props.zip)\n      _this.props.getCoordsRequest(_this.props.zip);\n    };\n\n    _this.coordstoZIP = function (coords) {\n      // console.log('coordstoZip')\n      // console.log(coords)\n      _this.props.getZIPRequest(coords);\n    };\n\n    _this.getBrowserCoordinates =\n    /*#__PURE__*/\n    _asyncToGenerator(\n    /*#__PURE__*/\n    _regeneratorRuntime.mark(function _callee() {\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return navigator.geolocation.getCurrentPosition(_this.showBrowserCoordinates);\n\n            case 2:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee, this);\n    }));\n\n    _this.showBrowserCoordinates =\n    /*#__PURE__*/\n    function () {\n      var _ref2 = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee2(position) {\n        var lat, lng, browserCoords;\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                _context2.next = 2;\n                return position.coords.latitude;\n\n              case 2:\n                lat = _context2.sent;\n                _context2.next = 5;\n                return position.coords.longitude;\n\n              case 5:\n                lng = _context2.sent;\n                browserCoords = {\n                  lat: lat,\n                  lng: lng\n                };\n\n                _this.coordstoZIP(browserCoords);\n\n              case 8:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n\n      return function (_x) {\n        return _ref2.apply(this, arguments);\n      };\n    }();\n\n    _this.getMeetupCoordinates =\n    /*#__PURE__*/\n    _asyncToGenerator(\n    /*#__PURE__*/\n    _regeneratorRuntime.mark(function _callee3() {\n      return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n        while (1) {\n          switch (_context3.prev = _context3.next) {\n            case 0:\n              _context3.next = 2;\n              return _this.getDOWOpening();\n\n            case 2:\n              _context3.next = 4;\n              return _this.ZIPtoCoordinates();\n\n            case 4:\n              _context3.next = 6;\n              return _this.renderMapContainer();\n\n            case 6:\n            case \"end\":\n              return _context3.stop();\n          }\n        }\n      }, _callee3, this);\n    }));\n    return _this;\n  }\n\n  _createClass(App, [{\n    key: \"renderMapContainer\",\n    value: function renderMapContainer() {\n      return React.createElement(Row, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 50\n        },\n        __self: this\n      }, React.createElement(MapContainer, {\n        coords: this.props.coords,\n        data: this.props.data,\n        date: this.props.date,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 51\n        },\n        __self: this\n      }));\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return React.createElement(\"div\", {\n        className: \"App\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 62\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 63\n        },\n        __self: this\n      }, React.createElement(Row, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 64\n        },\n        __self: this\n      }, React.createElement(Col, {\n        sm: \"4\",\n        md: \"4\",\n        lg: \"4\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 65\n        },\n        __self: this\n      }), React.createElement(Col, {\n        sm: \"4\",\n        md: \"4\",\n        lg: \"4\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 67\n        },\n        __self: this\n      }, React.createElement(Card, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 68\n        },\n        __self: this\n      }, React.createElement(CardTitle, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 69\n        },\n        __self: this\n      }, \" XKCD Geohashing\"), React.createElement(CardSubtitle, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 70\n        },\n        __self: this\n      }, \" inspired by xkcd.com/426\"), React.createElement(CardBody, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 71\n        },\n        __self: this\n      }, React.createElement(Form, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 72\n        },\n        __self: this\n      }, React.createElement(Input, {\n        type: \"date\",\n        onChange: this.handleDateInput,\n        max: moment().format(\"YYYY-MM-DD\"),\n        defaultValue: '',\n        value: this.props.date,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 73\n        },\n        __self: this\n      }), React.createElement(Button, {\n        color: \"primary\",\n        onClick: this.getDOWOpening,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 74\n        },\n        __self: this\n      }, \" Get DOW Data \"), React.createElement(\"u\", {\n        color: \"secondary\",\n        onClick: this.doToday,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 75\n        },\n        __self: this\n      }, \" Or just use today's date.\")), React.createElement(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 77\n        },\n        __self: this\n      }, \" The most recent DOW opening for that day is \", this.props.data, \" \"), React.createElement(Form, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 78\n        },\n        __self: this\n      }, React.createElement(Input, {\n        onChange: this.handleZIPInput,\n        maxLength: \"9\",\n        defaultValue: '',\n        value: this.props.zip,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 79\n        },\n        __self: this\n      }), React.createElement(Button, {\n        color: \"primary\",\n        onClick: this.ZIPtoCoordinates,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 80\n        },\n        __self: this\n      }, \" Set Location \"), React.createElement(Button, {\n        color: \"secondary\",\n        onClick: this.getBrowserCoordinates,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 81\n        },\n        __self: this\n      }, \"Get location from browser instead\")), React.createElement(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 83\n        },\n        __self: this\n      }, \" Your meetup coordinates are \", this.props.coords.lat, \" \\xB0N, \", this.props.coords.lng, \"\\xB0E\"), React.createElement(Form, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 85\n        },\n        __self: this\n      }, React.createElement(Button, {\n        color: \"primary\",\n        onClick: this.getMeetupCoordinates,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 86\n        },\n        __self: this\n      }, \"Compute Meetup Coordinates\"))))), React.createElement(Col, {\n        sm: \"4\",\n        md: \"4\",\n        lg: \"4\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 91\n        },\n        __self: this\n      })), this.renderMapContainer()));\n    }\n  }]);\n\n  return App;\n}(React.Component);\n\nfunction mapStateToProps(state) {\n  return {\n    data: state.dowReducer.data,\n    date: state.dateReducer.date,\n    zip: state.ZIPReducer.zip,\n    coords: state.coordsReducer.coords\n  };\n}\n\nfunction mapDispatchToProps(dispatch) {\n  return bindActionCreators({\n    getDOWRequest: getDOWRequest,\n    changeDate: changeDate,\n    changeZIP: changeZIP,\n    getCoordsRequest: getCoordsRequest,\n    getZIPRequest: getZIPRequest\n  }, dispatch);\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);","map":{"version":3,"sources":["/Users/Neil/Projects/xkcd-geohashing/src/components/App.js"],"names":["React","Form","Button","Input","Card","CardTitle","CardSubtitle","CardBody","Row","Col","connect","getDOWRequest","getCoordsRequest","getZIPRequest","changeDate","changeZIP","bindActionCreators","moment","MapContainer","App","getDOWOpening","props","date","handleDateInput","e","target","value","doToday","format","handleZIPInput","ZIPtoCoordinates","zip","coordstoZIP","coords","getBrowserCoordinates","navigator","geolocation","getCurrentPosition","showBrowserCoordinates","position","latitude","lat","longitude","lng","browserCoords","getMeetupCoordinates","renderMapContainer","data","Component","mapStateToProps","state","dowReducer","dateReducer","ZIPReducer","coordsReducer","mapDispatchToProps","dispatch"],"mappings":";;;;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAAQC,IAAR,EAAcC,MAAd,EAAsBC,KAAtB,EAA6BC,IAA7B,EAAmCC,SAAnC,EAA8CC,YAA9C,EAA4DC,QAA5D,EAAsEC,GAAtE,EAA2EC,GAA3E,QAAqF,YAArF;AACA,SAAQC,OAAR,QAAsB,aAAtB;AACA,SAAQC,aAAR,QAA4B,gBAA5B;AACA,SAAQC,gBAAR,QAA+B,mBAA/B;AACA,SAAQC,aAAR,QAA4B,gBAA5B;AACA,SAAQC,UAAR,QAAyB,iBAAzB;AACA,SAAQC,SAAR,QAAwB,gBAAxB;AACA,SAAQC,kBAAR,QAAiC,OAAjC;AACA,OAAOC,MAAP,MAAmB,QAAnB;AACA,OAAOC,YAAP,MAAyB,gBAAzB;;IAEMC,G;;;;;;;;;;;;;;;;;;UAEJC,a,GAAgB,YAAM;AACpB,YAAKC,KAAL,CAAWV,aAAX,CAAyB,MAAKU,KAAL,CAAWC,IAApC;AACD,K;;UACDC,e,GAAkB,UAACC,CAAD,EAAM;AACtB,YAAKH,KAAL,CAAWP,UAAX,CAAsBU,CAAC,CAACC,MAAF,CAASC,KAA/B;AACD,K;;UACDC,O,GAAU,YAAO;AACf,YAAKN,KAAL,CAAWP,UAAX,CAAsBG,MAAM,GAAGW,MAAT,CAAgB,YAAhB,CAAtB;AACD,K;;UACDC,c,GAAiB,UAACL,CAAD,EAAO;AACtB;AACA,YAAKH,KAAL,CAAWN,SAAX,CAAqBS,CAAC,CAACC,MAAF,CAASC,KAA9B;AACD,K;;UACDI,gB,GAAmB,YAAK;AACtB;AACA;AACA,YAAKT,KAAL,CAAWT,gBAAX,CAA4B,MAAKS,KAAL,CAAWU,GAAvC;AACD,K;;UACDC,W,GAAc,UAACC,MAAD,EAAW;AACvB;AACA;AACA,YAAKZ,KAAL,CAAWR,aAAX,CAAyBoB,MAAzB;AACD,K;;UACDC,qB;;;;6BAAwB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBAEhBC,SAAS,CAACC,WAAV,CAAsBC,kBAAtB,CAAyC,MAAKC,sBAA9C,CAFgB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,K;;UAIxBA,sB;;;;;+BAAyB,kBAAOC,QAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uBACPA,QAAQ,CAACN,MAAT,CAAgBO,QADT;;AAAA;AACnBC,gBAAAA,GADmB;AAAA;AAAA,uBAEPF,QAAQ,CAACN,MAAT,CAAgBS,SAFT;;AAAA;AAEnBC,gBAAAA,GAFmB;AAGnBC,gBAAAA,aAHmB,GAGH;AAACH,kBAAAA,GAAG,EAAEA,GAAN;AAAWE,kBAAAA,GAAG,EAACA;AAAf,iBAHG;;AAIvB,sBAAKX,WAAL,CAAiBY,aAAjB;;AAJuB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,O;;;;;;;UAazBC,oB;;;;6BAAuB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBACf,MAAKzB,aAAL,EADe;;AAAA;AAAA;AAAA,qBAEf,MAAKU,gBAAL,EAFe;;AAAA;AAAA;AAAA,qBAGf,MAAKgB,kBAAL,EAHe;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,K;;;;;;yCAPH;AAClB,aACE,oBAAC,GAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACI,oBAAC,YAAD;AAAc,QAAA,MAAM,EAAE,KAAKzB,KAAL,CAAWY,MAAjC;AAAyC,QAAA,IAAI,EAAI,KAAKZ,KAAL,CAAW0B,IAA5D;AAAkE,QAAA,IAAI,EAAI,KAAK1B,KAAL,CAAWC,IAArF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADJ,CADF;AAKD;;;6BAMO;AACN,aACE;AAAK,QAAA,SAAS,EAAC,KAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE,oBAAC,GAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE,oBAAC,GAAD;AAAK,QAAA,EAAE,EAAC,GAAR;AAAY,QAAA,EAAE,EAAC,GAAf;AAAmB,QAAA,EAAE,EAAC,GAAtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADF,EAGE,oBAAC,GAAD;AAAK,QAAA,EAAE,EAAC,GAAR;AAAY,QAAA,EAAE,EAAC,GAAf;AAAmB,QAAA,EAAE,EAAC,GAAtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE,oBAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE,oBAAC,SAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,4BADF,EAEE,oBAAC,YAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qCAFF,EAGE,oBAAC,QAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE,oBAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE,oBAAC,KAAD;AAAO,QAAA,IAAI,EAAC,MAAZ;AAAmB,QAAA,QAAQ,EAAE,KAAKC,eAAlC;AAAmD,QAAA,GAAG,EAAEN,MAAM,GAAGW,MAAT,CAAgB,YAAhB,CAAxD;AAAuF,QAAA,YAAY,EAAI,EAAvG;AAA2G,QAAA,KAAK,EAAI,KAAKP,KAAL,CAAWC,IAA/H;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADF,EAEE,oBAAC,MAAD;AAAQ,QAAA,KAAK,EAAG,SAAhB;AAA0B,QAAA,OAAO,EAAI,KAAKF,aAA1C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,0BAFF,EAGE;AAAG,QAAA,KAAK,EAAC,WAAT;AAAqB,QAAA,OAAO,EAAI,KAAKO,OAArC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sCAHF,CADF,EAMI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,0DAAiD,KAAKN,KAAL,CAAW0B,IAA5D,MANJ,EAOE,oBAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE,oBAAC,KAAD;AAAO,QAAA,QAAQ,EAAE,KAAKlB,cAAtB;AAAsC,QAAA,SAAS,EAAC,GAAhD;AAAoD,QAAA,YAAY,EAAI,EAApE;AAAwE,QAAA,KAAK,EAAE,KAAKR,KAAL,CAAWU,GAA1F;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADF,EAEI,oBAAC,MAAD;AAAQ,QAAA,KAAK,EAAG,SAAhB;AAA0B,QAAA,OAAO,EAAI,KAAKD,gBAA1C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,0BAFJ,EAGI,oBAAC,MAAD;AAAQ,QAAA,KAAK,EAAC,WAAd;AAA0B,QAAA,OAAO,EAAI,KAAKI,qBAA1C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,6CAHJ,CAPF,EAYI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,0CAAiC,KAAKb,KAAL,CAAWY,MAAX,CAAkBQ,GAAnD,cAA6D,KAAKpB,KAAL,CAAWY,MAAX,CAAkBU,GAA/E,UAZJ,EAcE,oBAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE,oBAAC,MAAD;AAAQ,QAAA,KAAK,EAAC,SAAd;AAAwB,QAAA,OAAO,EAAI,KAAKE,oBAAxC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sCADF,CAdF,CAHF,CADF,CAHF,EA2BE,oBAAC,GAAD;AAAK,QAAA,EAAE,EAAC,GAAR;AAAY,QAAA,EAAE,EAAC,GAAf;AAAmB,QAAA,EAAE,EAAC,GAAtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QA3BF,CADF,EA+BK,KAAKC,kBAAL,EA/BL,CADF,CADF;AAqCD;;;;EArFe9C,KAAK,CAACgD,S;;AAwFxB,SAASC,eAAT,CAAyBC,KAAzB,EAA+B;AAC7B,SAAO;AACLH,IAAAA,IAAI,EAAEG,KAAK,CAACC,UAAN,CAAiBJ,IADlB;AAELzB,IAAAA,IAAI,EAAE4B,KAAK,CAACE,WAAN,CAAkB9B,IAFnB;AAGLS,IAAAA,GAAG,EAAEmB,KAAK,CAACG,UAAN,CAAiBtB,GAHjB;AAILE,IAAAA,MAAM,EAAEiB,KAAK,CAACI,aAAN,CAAoBrB;AAJvB,GAAP;AAMD;;AACD,SAASsB,kBAAT,CAA4BC,QAA5B,EAAqC;AACnC,SAAOxC,kBAAkB,CAAC;AACxBL,IAAAA,aAAa,EAAEA,aADS;AAExBG,IAAAA,UAAU,EAAEA,UAFY;AAGxBC,IAAAA,SAAS,EAAEA,SAHa;AAIxBH,IAAAA,gBAAgB,EAAEA,gBAJM;AAKxBC,IAAAA,aAAa,EAAEA;AALS,GAAD,EAMtB2C,QANsB,CAAzB;AAOD;;AACD,eAAe9C,OAAO,CAACuC,eAAD,EAAiBM,kBAAjB,CAAP,CAA4CpC,GAA5C,CAAf","sourcesContent":["import React from 'react'\nimport {Form, Button, Input, Card, CardTitle, CardSubtitle, CardBody, Row, Col} from 'reactstrap';\nimport {connect} from 'react-redux';\nimport {getDOWRequest} from '../actions/dow'\nimport {getCoordsRequest} from '../actions/coords'\nimport {getZIPRequest} from '../actions/zip'\nimport {changeDate} from '../actions/date'\nimport {changeZIP} from '../actions/zip'\nimport {bindActionCreators} from 'redux'\nimport moment from 'moment'\nimport MapContainer from './MapContainer'\n\nclass App extends React.Component {\n\n  getDOWOpening = () => {\n    this.props.getDOWRequest(this.props.date);\n  }\n  handleDateInput = (e) =>{\n    this.props.changeDate(e.target.value);\n  }\n  doToday = () =>  {\n    this.props.changeDate(moment().format('YYYY-MM-DD'));\n  }\n  handleZIPInput = (e) => {\n    // console.log(e.target.value)\n    this.props.changeZIP(e.target.value);\n  }\n  ZIPtoCoordinates = () =>{\n    // console.log('ZIPtoCoordinates')\n    // console.log(this.props.zip)\n    this.props.getCoordsRequest(this.props.zip)\n  }\n  coordstoZIP = (coords) =>{\n    // console.log('coordstoZip')\n    // console.log(coords)\n    this.props.getZIPRequest(coords)\n  }\n  getBrowserCoordinates = async () =>{\n    // console.log('getting browser coordinates')\n    await navigator.geolocation.getCurrentPosition(this.showBrowserCoordinates);\n  }\n  showBrowserCoordinates = async (position) =>{\n    let lat = await position.coords.latitude\n    let lng = await position.coords.longitude\n    let browserCoords = {lat: lat, lng:lng}\n    this.coordstoZIP(browserCoords)\n  }\n  renderMapContainer(){\n    return(\n      <Row>\n          <MapContainer coords={this.props.coords} data = {this.props.data} date = {this.props.date}></MapContainer>\n      </Row>\n    )\n  }\n  getMeetupCoordinates = async () =>{\n    await this.getDOWOpening();\n    await this.ZIPtoCoordinates();\n    await this.renderMapContainer();\n  }\n  render(){\n    return (\n      <div className=\"App\">\n        <div>\n          <Row>\n            <Col sm=\"4\" md=\"4\" lg=\"4\">\n            </Col>\n            <Col sm=\"4\" md=\"4\" lg=\"4\">\n              <Card>\n                <CardTitle> XKCD Geohashing</CardTitle>\n                <CardSubtitle> inspired by xkcd.com/426</CardSubtitle>\n                <CardBody>\n                  <Form>\n                    <Input type=\"date\" onChange={this.handleDateInput} max={moment().format(\"YYYY-MM-DD\")} defaultValue = {''} value = {this.props.date}/>\n                    <Button color = \"primary\" onClick = {this.getDOWOpening}> Get DOW Data </Button>\n                    <u color=\"secondary\" onClick = {this.doToday}> Or just use today's date.</u>\n                  </Form>\n                    <p> The most recent DOW opening for that day is {this.props.data} </p>\n                  <Form>\n                    <Input onChange={this.handleZIPInput} maxLength=\"9\" defaultValue = {''} value={this.props.zip} />\n                      <Button color = \"primary\" onClick = {this.ZIPtoCoordinates}> Set Location </Button>\n                      <Button color=\"secondary\" onClick = {this.getBrowserCoordinates}>Get location from browser instead</Button>\n                  </Form>\n                    <p> Your meetup coordinates are {this.props.coords.lat} °N, {this.props.coords.lng}°E</p>\n\n                  <Form>\n                    <Button color=\"primary\" onClick = {this.getMeetupCoordinates}>Compute Meetup Coordinates</Button>\n                  </Form>\n                </CardBody>\n              </Card>\n            </Col>\n            <Col sm=\"4\" md=\"4\" lg=\"4\">\n            </Col>\n          </Row>\n            {this.renderMapContainer()}\n        </div>\n      </div>\n    );\n  }\n}\n\nfunction mapStateToProps(state){\n  return {\n    data: state.dowReducer.data,\n    date: state.dateReducer.date,\n    zip: state.ZIPReducer.zip,\n    coords: state.coordsReducer.coords,\n  }\n}\nfunction mapDispatchToProps(dispatch){\n  return bindActionCreators({\n    getDOWRequest: getDOWRequest,\n    changeDate: changeDate,\n    changeZIP: changeZIP,\n    getCoordsRequest: getCoordsRequest,\n    getZIPRequest: getZIPRequest\n  }, dispatch)\n}\nexport default connect(mapStateToProps,mapDispatchToProps)(App)\n"]},"metadata":{},"sourceType":"module"}