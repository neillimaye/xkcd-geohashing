{"ast":null,"code":"import _regeneratorRuntime from \"/Users/Neil/Projects/xkcd-geohashing/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\n\nvar _marked =\n/*#__PURE__*/\n_regeneratorRuntime.mark(getZIP),\n    _marked2 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(watchGetZIPRequest);\n\nimport { takeLatest, call, put, fork } from 'redux-saga/effects';\nimport * as actions from '../actions/zip';\nimport * as api from '../api/zip';\nimport { Types } from '../actions/zip';\n\nfunction getZIP(action) {\n  var result;\n  return _regeneratorRuntime.wrap(function getZIP$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.prev = 0;\n          // console.log('getzip saga')\n          console.log(action);\n          _context.next = 4;\n          return call(api.getZIP, action.coords);\n\n        case 4:\n          result = _context.sent;\n          console.log('successful saga execution');\n          console.log(result);\n          _context.next = 9;\n          return put({\n            type: Types.CHANGE_ZIP,\n            payload: result\n          });\n\n        case 9:\n          _context.next = 14;\n          break;\n\n        case 11:\n          _context.prev = 11;\n          _context.t0 = _context[\"catch\"](0);\n          console.log('error');\n\n        case 14:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, _marked, this, [[0, 11]]);\n}\n\nfunction watchGetZIPRequest() {\n  return _regeneratorRuntime.wrap(function watchGetZIPRequest$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          _context2.next = 2;\n          return takeLatest(actions.Types.GET_ZIP_REQUEST, getZIP);\n\n        case 2:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, _marked2, this);\n}\n\nvar ZIPSagas = [fork(watchGetZIPRequest)];\nexport default ZIPSagas;","map":{"version":3,"sources":["/Users/Neil/Projects/xkcd-geohashing/src/sagas/zip.js"],"names":["getZIP","watchGetZIPRequest","takeLatest","call","put","fork","actions","api","Types","action","console","log","coords","result","type","CHANGE_ZIP","payload","GET_ZIP_REQUEST","ZIPSagas"],"mappings":";;;;yBAMUA,M;;;yBAgBAC,kB;;AAtBV,SAAQC,UAAR,EAAoBC,IAApB,EAA0BC,GAA1B,EAA+BC,IAA/B,QAA0C,oBAA1C;AACA,OAAO,KAAKC,OAAZ,MAAyB,gBAAzB;AACA,OAAO,KAAKC,GAAZ,MAAqB,YAArB;AACA,SAAQC,KAAR,QAAoB,gBAApB;;AAGA,SAAUR,MAAV,CAAiBS,MAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEE;AACAC,UAAAA,OAAO,CAACC,GAAR,CAAYF,MAAZ;AAHF;AAIiB,iBAAMN,IAAI,CAACI,GAAG,CAACP,MAAL,EAAaS,MAAM,CAACG,MAApB,CAAV;;AAJjB;AAIQC,UAAAA,MAJR;AAKEH,UAAAA,OAAO,CAACC,GAAR,CAAY,2BAAZ;AACAD,UAAAA,OAAO,CAACC,GAAR,CAAYE,MAAZ;AANF;AAOE,iBAAMT,GAAG,CAAC;AACTU,YAAAA,IAAI,EAAEN,KAAK,CAACO,UADH;AAETC,YAAAA,OAAO,EAAEH;AAFA,WAAD,CAAT;;AAPF;AAAA;AAAA;;AAAA;AAAA;AAAA;AAYMH,UAAAA,OAAO,CAACC,GAAR,CAAY,OAAZ;;AAZN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAgBA,SAAUV,kBAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAIC,iBAAMC,UAAU,CAACI,OAAO,CAACE,KAAR,CAAcS,eAAf,EAAgCjB,MAAhC,CAAhB;;AAJD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAOA,IAAMkB,QAAQ,GAAG,CAChBb,IAAI,CAACJ,kBAAD,CADY,CAAjB;AAIA,eAAeiB,QAAf","sourcesContent":["import {takeLatest, call, put, fork} from 'redux-saga/effects';\nimport * as actions from '../actions/zip';\nimport * as api from '../api/zip';\nimport {Types} from '../actions/zip';\n\n\nfunction* getZIP(action){\n\ttry{\n\t\t// console.log('getzip saga')\n\t\tconsole.log(action)\n\t\tconst result = yield call(api.getZIP, action.coords);\n\t\tconsole.log('successful saga execution')\n\t\tconsole.log(result)\n\t\tyield put({\n\t\t\ttype: Types.CHANGE_ZIP,\n\t\t\tpayload: result\n\t\t})\n\t}catch(e){\n      console.log('error')\n\t}\n}\n\nfunction* watchGetZIPRequest(){\n\t// console.log('watching getzip saga call')\n\t//take the latest request action called and then call the getzip function\n\t//taking the latest because we want to adjust for when people update the date they put in\n\tyield takeLatest(actions.Types.GET_ZIP_REQUEST, getZIP);\n}\n\nconst ZIPSagas = [\n\tfork(watchGetZIPRequest),\n];\n\nexport default ZIPSagas;\n"]},"metadata":{},"sourceType":"module"}