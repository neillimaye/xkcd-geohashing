{"ast":null,"code":"import _classCallCheck from \"/Users/Neil/Projects/xkcd-geohashing/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/Neil/Projects/xkcd-geohashing/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/Neil/Projects/xkcd-geohashing/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/Neil/Projects/xkcd-geohashing/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/Neil/Projects/xkcd-geohashing/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/Neil/Projects/xkcd-geohashing/src/components/App.js\";\nimport React from 'react';\nimport { Form, Button, Input, Card, CardText, CardBody, CardTitle, CardSubtitle } from 'reactstrap';\nimport { connect } from 'react-redux';\nimport { getDOWRequest } from '../actions/dow';\nimport { getCoordsRequest } from '../actions/coords';\nimport { changeDate } from '../actions/date';\nimport { changeZIP } from '../actions/zip';\nimport { bindActionCreators } from 'redux';\nimport moment from 'moment';\nimport md5 from 'md5';\nimport GoogleMapReact from 'google-map-react';\nimport MapContainer from './MapContainer';\n\nvar App =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(App, _React$Component);\n\n  function App() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, App);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(App)).call.apply(_getPrototypeOf2, [this].concat(args)));\n\n    _this.handleSubmit = function () {\n      _this.props.getDOWRequest(_this.props.date);\n    };\n\n    _this.handleDateInput = function (e) {\n      _this.props.changeDate(e.target.value);\n    };\n\n    _this.doToday = function () {\n      _this.props.changeDate(moment().format('YYYY-MM-DD'));\n    };\n\n    _this.handleZIPInput = function (e) {\n      console.log(e.target.value);\n\n      _this.props.changeZIP(e.target.value);\n    };\n\n    _this.ZIPtoCoordinates = function (e) {\n      console.log('ZIPtoCoordinates');\n      console.log(_this.props.zip);\n\n      _this.props.getCoordsRequest(_this.props.zip);\n    };\n\n    _this.getGeohash = function () {\n      //the math behind finding the geohashing coordinates\n      var lat = String(parseInt(_this.props.coords.lat));\n      var lng = String(parseInt(_this.props.coords.lng));\n      var stringToHash = String(_this.props.date) + '-' + String(_this.props.data);\n      var hashResult = md5(stringToHash);\n      console.log(hashResult); //working\n\n      var pt1 = hashResult.slice(0, hashResult.length / 2);\n      var pt2 = hashResult.slice(hashResult.length / 2);\n      console.log(pt1);\n      console.log(pt2);\n      var todec1 = parseInt(pt1, 16);\n      var todec2 = parseInt(pt2, 16);\n      var meetupCoordinates = {\n        lat: lat + '.' + todec1,\n        lng: lng + '.' + todec2\n      };\n    };\n\n    return _this;\n  }\n\n  _createClass(App, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      console.log(this.props.coords);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return React.createElement(\"div\", {\n        className: \"App\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 60\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 61\n        },\n        __self: this\n      }, React.createElement(Form, {\n        inline: true,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 62\n        },\n        __self: this\n      }, React.createElement(Input, {\n        type: \"date\",\n        onChange: this.handleDateInput,\n        max: moment().format(\"YYYY-MM-DD\"),\n        value: this.props.date,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 63\n        },\n        __self: this\n      }), React.createElement(Button, {\n        color: \"primary\",\n        onClick: this.handleSubmit,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 64\n        },\n        __self: this\n      }, \"Submit\"), React.createElement(\"p\", {\n        color: \"secondary\",\n        onClick: this.doToday,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 65\n        },\n        __self: this\n      }, \" Or just use today's date.\")), React.createElement(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 67\n        },\n        __self: this\n      }, \" The most recent DOW opening for that day is \", this.props.data, \" \"), React.createElement(Form, {\n        inline: true,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 68\n        },\n        __self: this\n      }, React.createElement(Input, {\n        onChange: this.handleZIPInput,\n        maxLength: \"9\",\n        value: this.props.zip,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 69\n        },\n        __self: this\n      }), React.createElement(Button, {\n        color: \"primary\",\n        onClick: this.ZIPtoCoordinates,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 70\n        },\n        __self: this\n      }, \"Submit\")), React.createElement(Card, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 72\n        },\n        __self: this\n      }, React.createElement(CardBody, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 73\n        },\n        __self: this\n      }, React.createElement(CardTitle, {\n        tag: \"h5\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 74\n        },\n        __self: this\n      }, \"FESTIVUS\"), React.createElement(CardSubtitle, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 75\n        },\n        __self: this\n      }, \" \"), React.createElement(CardText, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 76\n        },\n        __self: this\n      }))), React.createElement(Form, {\n        inline: true,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 79\n        },\n        __self: this\n      }, React.createElement(Button, {\n        color: \"primary\",\n        onClick: this.getGeohash,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 80\n        },\n        __self: this\n      }, \" Get the location\")), React.createElement(MapContainer, {\n        coords: this.props.coords,\n        date: this.props.date,\n        data: this.props.data,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 83\n        },\n        __self: this\n      })));\n    }\n  }]);\n\n  return App;\n}(React.Component);\n\nfunction mapStateToProps(state) {\n  return {\n    data: state.dowReducer.data,\n    date: state.dateReducer.date,\n    zip: state.ZIPReducer.zip,\n    coords: state.coordsReducer.coords\n  };\n}\n\nfunction mapDispatchToProps(dispatch) {\n  return bindActionCreators({\n    getDOWRequest: getDOWRequest,\n    changeDate: changeDate,\n    changeZIP: changeZIP,\n    getCoordsRequest: getCoordsRequest\n  }, dispatch);\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);","map":{"version":3,"sources":["/Users/Neil/Projects/xkcd-geohashing/src/components/App.js"],"names":["React","Form","Button","Input","Card","CardText","CardBody","CardTitle","CardSubtitle","connect","getDOWRequest","getCoordsRequest","changeDate","changeZIP","bindActionCreators","moment","md5","GoogleMapReact","MapContainer","App","handleSubmit","props","date","handleDateInput","e","target","value","doToday","format","handleZIPInput","console","log","ZIPtoCoordinates","zip","getGeohash","lat","String","parseInt","coords","lng","stringToHash","data","hashResult","pt1","slice","length","pt2","todec1","todec2","meetupCoordinates","Component","mapStateToProps","state","dowReducer","dateReducer","ZIPReducer","coordsReducer","mapDispatchToProps","dispatch"],"mappings":"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","sourcesContent":["import React from 'react'\nimport {Form, Button, Input, Card, CardText, CardBody,\n  CardTitle, CardSubtitle} from 'reactstrap';\nimport {connect} from 'react-redux';\nimport {getDOWRequest} from '../actions/dow'\nimport {getCoordsRequest} from '../actions/coords'\nimport {changeDate} from '../actions/date'\nimport {changeZIP} from '../actions/zip'\nimport {bindActionCreators} from 'redux'\nimport moment from 'moment'\nimport md5 from 'md5'\nimport GoogleMapReact from 'google-map-react';\nimport MapContainer from './MapContainer'\n\nclass App extends React.Component {\n\n  handleSubmit = () => {\n    this.props.getDOWRequest(this.props.date);\n  }\n  handleDateInput = (e) =>{\n    this.props.changeDate(e.target.value);\n  }\n  doToday = () =>  {\n    this.props.changeDate(moment().format('YYYY-MM-DD'));\n  }\n  handleZIPInput = (e) => {\n    console.log(e.target.value)\n    this.props.changeZIP(e.target.value);\n  }\n  ZIPtoCoordinates = (e) =>{\n    console.log('ZIPtoCoordinates')\n    console.log(this.props.zip)\n    this.props.getCoordsRequest(this.props.zip)\n  }\n  getGeohash = () =>{\n    //the math behind finding the geohashing coordinates\n    let lat = String(parseInt(this.props.coords.lat));\n    let lng = String(parseInt(this.props.coords.lng));\n    let stringToHash = String(this.props.date) + '-' + String(this.props.data) ;\n    let hashResult = md5(stringToHash)\n    console.log(hashResult)  //working\n    let pt1 = hashResult.slice(0,hashResult.length/2)\n    let pt2 = hashResult.slice(hashResult.length/2)\n    console.log(pt1)\n    console.log(pt2)\n    let todec1 = parseInt(pt1,16)\n    let todec2 = parseInt(pt2,16)\n    const meetupCoordinates = {\n      lat: lat+'.'+todec1,\n      lng: lng+'.'+todec2\n    }\n\n\n  }\n  componentDidMount(){\n    console.log(this.props.coords)\n  }\n  render(){\n    return (\n      <div className=\"App\">\n        <div>\n        <Form inline>\n          <Input type=\"date\" onChange={this.handleDateInput} max={moment().format(\"YYYY-MM-DD\")} value = {this.props.date}/>\n          <Button color=\"primary\" onClick = {this.handleSubmit}>Submit</Button>\n          <p color=\"secondary\" onClick = {this.doToday}> Or just use today's date.</p>\n        </Form>\n        <p> The most recent DOW opening for that day is {this.props.data} </p>\n        <Form inline>\n          <Input onChange={this.handleZIPInput} maxLength=\"9\" value={this.props.zip} />\n          <Button color=\"primary\" onClick = {this.ZIPtoCoordinates}>Submit</Button>\n        </Form>\n        <Card>\n          <CardBody>\n           <CardTitle tag=\"h5\">FESTIVUS</CardTitle>\n            <CardSubtitle> </ CardSubtitle>\n            <CardText></CardText>\n          </CardBody>\n        </Card>\n        <Form inline>\n          <Button color=\"primary\" onClick = {this.getGeohash}> Get the location</Button>\n        </Form>\n\n        <MapContainer coords= {this.props.coords} date = {this.props.date} data = {this.props.data} />\n        </div>\n      </div>\n    );\n  }\n}\n\nfunction mapStateToProps(state){\n  return {\n    data: state.dowReducer.data,\n    date: state.dateReducer.date,\n    zip: state.ZIPReducer.zip,\n    coords: state.coordsReducer.coords,\n  }\n}\n\nfunction mapDispatchToProps(dispatch){\n  return bindActionCreators({\n    getDOWRequest: getDOWRequest,\n    changeDate: changeDate,\n    changeZIP: changeZIP,\n    getCoordsRequest: getCoordsRequest\n  }, dispatch)\n}\nexport default connect(mapStateToProps,mapDispatchToProps)(App)\n"]},"metadata":{},"sourceType":"module"}