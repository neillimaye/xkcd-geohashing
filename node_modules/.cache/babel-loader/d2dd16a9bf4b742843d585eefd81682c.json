{"ast":null,"code":"import _classCallCheck from \"/Users/Neil/Projects/xkcd-geohashing/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/Neil/Projects/xkcd-geohashing/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/Neil/Projects/xkcd-geohashing/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/Neil/Projects/xkcd-geohashing/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/Neil/Projects/xkcd-geohashing/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/Neil/Projects/xkcd-geohashing/src/components/App.js\";\nimport React from 'react';\nimport { Form, Button, Input } from 'reactstrap';\nimport { connect } from 'react-redux';\nimport { getDOWRequest } from '../actions/dow';\nimport { getCoordsRequest } from '../actions/coords';\nimport { changeDate } from '../actions/date';\nimport { changeZIP } from '../actions/zip';\nimport { bindActionCreators } from 'redux';\nimport moment from 'moment';\n\nvar App =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(App, _React$Component);\n\n  function App() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, App);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(App)).call.apply(_getPrototypeOf2, [this].concat(args)));\n\n    _this.handleSubmit = function () {\n      _this.props.getDOWRequest(_this.props.date);\n    };\n\n    _this.handleDateInput = function (e) {\n      _this.props.changeDate(e.target.value);\n    };\n\n    _this.doToday = function () {\n      _this.props.changeDate(moment().format('YYYY-MM-DD'));\n    };\n\n    _this.handleZIPInput = function (e) {\n      _this.props.changeZIP(e.target.value);\n    };\n\n    _this.ZIPtoCoordinates = function (e) {\n      _this.props.getCoords(_this.props.zip);\n    };\n\n    return _this;\n  }\n\n  _createClass(App, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {}\n  }, {\n    key: \"render\",\n    value: function render() {\n      // <FormGroup className=\"mb-2 mr-sm-2 mb-sm-0\">\n      // <Input type=\"date\" name=\"Date\" placeholder=\"YYYY-MM-DD\" />\n      // </FormGroup>\n      // console.log('gotta have my props')\n      // console.log(this.props)\n      return React.createElement(\"div\", {\n        className: \"App\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 38\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 39\n        },\n        __self: this\n      }, React.createElement(Form, {\n        inline: true,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 40\n        },\n        __self: this\n      }, React.createElement(Input, {\n        onChange: this.handleDateInput,\n        max: moment().format(\"YYYY-MM-DD\"),\n        placeholder: this.props.date,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 41\n        },\n        __self: this\n      }), React.createElement(Button, {\n        color: \"secondary\",\n        onClick: this.doToday,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 42\n        },\n        __self: this\n      }, \" Or just use today's date. \"), React.createElement(Button, {\n        color: \"primary\",\n        onClick: this.handleSubmit,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 43\n        },\n        __self: this\n      }, \"Submit\")), React.createElement(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 45\n        },\n        __self: this\n      }, \" The most recent DOW opening for that day is \", this.props.data.data, \" \"), React.createElement(Form, {\n        inline: true,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 46\n        },\n        __self: this\n      }, React.createElement(Input, {\n        onChange: this.handleZIPInput,\n        maxLength: \"9\",\n        placeholder: this.props.zip,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 47\n        },\n        __self: this\n      }), React.createElement(Button, {\n        color: \"primary\",\n        onClick: this.ZIPtoCoordinates,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 48\n        },\n        __self: this\n      }, \"Submit\"))));\n    }\n  }]);\n\n  return App;\n}(React.Component);\n\nfunction mapStateToProps(state) {\n  return {\n    data: state.dowReducer,\n    date: state.dateReducer,\n    zip: state.ZIPReducer,\n    coords: state.coordsReducer\n  };\n}\n\nfunction mapDispatchToProps(dispatch) {\n  return bindActionCreators({\n    getDOWRequest: getDOWRequest,\n    changeDate: changeDate,\n    changeZIP: changeZIP,\n    getCoords: getCoordsRequest\n  }, dispatch);\n} //\n// export default connect(({data}) => ({data}),{\n//   getDOWRequest\n// })(App);\n\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);","map":{"version":3,"sources":["/Users/Neil/Projects/xkcd-geohashing/src/components/App.js"],"names":["React","Form","Button","Input","connect","getDOWRequest","getCoordsRequest","changeDate","changeZIP","bindActionCreators","moment","App","handleSubmit","props","date","handleDateInput","e","target","value","doToday","format","handleZIPInput","ZIPtoCoordinates","getCoords","zip","data","Component","mapStateToProps","state","dowReducer","dateReducer","ZIPReducer","coords","coordsReducer","mapDispatchToProps","dispatch"],"mappings":"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","sourcesContent":["import React from 'react'\nimport {Form, Button, Input} from 'reactstrap';\nimport {connect} from 'react-redux';\nimport {getDOWRequest} from '../actions/dow'\nimport {getCoordsRequest} from '../actions/coords'\nimport {changeDate} from '../actions/date'\nimport {changeZIP} from '../actions/zip'\nimport {bindActionCreators} from 'redux'\nimport moment from 'moment'\nclass App extends React.Component {\n\n  handleSubmit = () => {\n    this.props.getDOWRequest(this.props.date);\n  }\n  handleDateInput = (e) =>{\n    this.props.changeDate(e.target.value);\n  }\n  doToday = () =>  {\n    this.props.changeDate(moment().format('YYYY-MM-DD'));\n  }\n  handleZIPInput = (e) => {\n    this.props.changeZIP(e.target.value);\n  }\n  ZIPtoCoordinates = (e) =>{\n    this.props.getCoords(this.props.zip)\n  }\n\n  componentDidMount(){\n\n  }\n  render(){\n    // <FormGroup className=\"mb-2 mr-sm-2 mb-sm-0\">\n    // <Input type=\"date\" name=\"Date\" placeholder=\"YYYY-MM-DD\" />\n    // </FormGroup>\n    // console.log('gotta have my props')\n    // console.log(this.props)\n    return (\n      <div className=\"App\">\n        <div>\n        <Form inline>\n          <Input onChange={this.handleDateInput} max={moment().format(\"YYYY-MM-DD\")} placeholder = {this.props.date}/>\n          <Button color=\"secondary\" onClick = {this.doToday}> Or just use today's date. </Button>\n          <Button color=\"primary\" onClick = {this.handleSubmit}>Submit</Button>\n        </Form>\n        <p> The most recent DOW opening for that day is {this.props.data.data} </p>\n        <Form inline>\n          <Input onChange={this.handleZIPInput} maxLength=\"9\" placeholder= {this.props.zip} />\n          <Button color=\"primary\" onClick = {this.ZIPtoCoordinates}>Submit</Button>\n\n        </Form>\n        </div>\n      </div>\n    );\n  }\n}\n\nfunction mapStateToProps(state){\n  return {\n    data: state.dowReducer,\n    date: state.dateReducer,\n    zip: state.ZIPReducer,\n    coords: state.coordsReducer\n  }\n}\n\nfunction mapDispatchToProps(dispatch){\n  return bindActionCreators({\n    getDOWRequest: getDOWRequest,\n    changeDate: changeDate,\n    changeZIP: changeZIP,\n    getCoords: getCoordsRequest,\n  }, dispatch)\n}\n//\n// export default connect(({data}) => ({data}),{\n//   getDOWRequest\n// })(App);\n\n\n\nexport default connect(mapStateToProps,mapDispatchToProps)(App)\n"]},"metadata":{},"sourceType":"module"}