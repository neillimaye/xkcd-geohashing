{"ast":null,"code":"import _regeneratorRuntime from \"/Users/Neil/Projects/xkcd-geohashing/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\n\nvar _marked =\n/*#__PURE__*/\n_regeneratorRuntime.mark(getCoords),\n    _marked2 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(watchGetCoordsRequest);\n\nimport { takeLatest, call, put, fork } from 'redux-saga/effects';\nimport * as actions from '../actions/coords';\nimport * as api from '../api/coords';\nimport { Types } from '../actions/coords';\n\nfunction getCoords(action) {\n  var result;\n  return _regeneratorRuntime.wrap(function getCoords$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.prev = 0;\n          _context.next = 3;\n          return call(api.getCoords, action.date);\n\n        case 3:\n          result = _context.sent;\n          _context.next = 6;\n          return put({\n            type: Types.GET_COORDS_SUCCESS,\n            payload: result\n          });\n\n        case 6:\n          _context.next = 11;\n          break;\n\n        case 8:\n          _context.prev = 8;\n          _context.t0 = _context[\"catch\"](0);\n          console.log('error');\n\n        case 11:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, _marked, this, [[0, 8]]);\n}\n\nfunction watchGetCoordsRequest() {\n  return _regeneratorRuntime.wrap(function watchGetCoordsRequest$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          _context2.next = 2;\n          return takeLatest(actions.Types.GET_COORDS_REQUEST, getcoords);\n\n        case 2:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, _marked2, this);\n}\n\nvar coordsSagas = [fork(watchGetCoordsRequest)];\nexport default coordsSagas;","map":{"version":3,"sources":["/Users/Neil/Projects/xkcd-geohashing/src/sagas/coords.js"],"names":["getCoords","watchGetCoordsRequest","takeLatest","call","put","fork","actions","api","Types","action","date","result","type","GET_COORDS_SUCCESS","payload","console","log","GET_COORDS_REQUEST","getcoords","coordsSagas"],"mappings":";;;;yBAMUA,S;;;yBAaAC,qB;;AAnBV,SAAQC,UAAR,EAAoBC,IAApB,EAA0BC,GAA1B,EAA+BC,IAA/B,QAA0C,oBAA1C;AACA,OAAO,KAAKC,OAAZ,MAAyB,mBAAzB;AACA,OAAO,KAAKC,GAAZ,MAAqB,eAArB;AACA,SAAQC,KAAR,QAAoB,mBAApB;;AAGA,SAAUR,SAAV,CAAoBS,MAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEiB,iBAAMN,IAAI,CAACI,GAAG,CAACP,SAAL,EAAgBS,MAAM,CAACC,IAAvB,CAAV;;AAFjB;AAEQC,UAAAA,MAFR;AAAA;AAIE,iBAAMP,GAAG,CAAC;AACTQ,YAAAA,IAAI,EAAEJ,KAAK,CAACK,kBADH;AAETC,YAAAA,OAAO,EAAEH;AAFA,WAAD,CAAT;;AAJF;AAAA;AAAA;;AAAA;AAAA;AAAA;AASMI,UAAAA,OAAO,CAACC,GAAR,CAAY,OAAZ;;AATN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAaA,SAAUf,qBAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAIC,iBAAMC,UAAU,CAACI,OAAO,CAACE,KAAR,CAAcS,kBAAf,EAAmCC,SAAnC,CAAhB;;AAJD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAOA,IAAMC,WAAW,GAAG,CACnBd,IAAI,CAACJ,qBAAD,CADe,CAApB;AAIA,eAAekB,WAAf","sourcesContent":["import {takeLatest, call, put, fork} from 'redux-saga/effects';\nimport * as actions from '../actions/coords';\nimport * as api from '../api/coords';\nimport {Types} from '../actions/coords';\n\n\nfunction* getCoords(action){\n\ttry{\n\t\tconst result = yield call(api.getCoords, action.date);\n\t\t// console.log('successful saga execution')\n\t\tyield put({\n\t\t\ttype: Types.GET_COORDS_SUCCESS,\n\t\t\tpayload: result\n\t\t})\n\t}catch(e){\n      console.log('error')\n\t}\n}\n\nfunction* watchGetCoordsRequest(){\n\t// console.log('watching getcoords saga call')\n\t//take the latest request action called and then call the getDow function\n\t//taking the latest because we want to adjust for when people update the date they put in\n\tyield takeLatest(actions.Types.GET_COORDS_REQUEST, getcoords);\n}\n\nconst coordsSagas = [\n\tfork(watchGetCoordsRequest),\n];\n\nexport default coordsSagas;\n"]},"metadata":{},"sourceType":"module"}